{"ast":null,"code":"import { debug } from \"util\";\n\nclass Animator {\n  constructor(ctx, spriteSheet) {\n    this.assets = {};\n    this.ctx = ctx;\n    this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n\n    window.assets = this.assets;\n  }\n\n  generateSprites(spriteSheet) {\n    // const output = [];\n    // debugger;\n    // let imgBM = createImageBitmap(spriteSheet.img, { premultiplyAlpha: 'premultiply' }).then((res) => {\n    //     this.addAsset(res);\n    //     this.render();\n    // debugger;\n    for (let i = 0; i < spriteSheet.config.rows; i++) {\n      for (let j = 0; j < spriteSheet.config.cols; j++) {\n        createImageBitmap(spriteSheet.img, // img data\n        i * spriteSheet.frame.width, // sx: \n        j * spriteSheet.frame.height, // sy:\n        spriteSheet.frame.width, // sw:\n        spriteSheet.frame.height // sh:\n        ).then(res => {\n          this.addAsset(res); // this.render();\n        });\n      }\n    }\n  }\n\n  addAsset(asset) {\n    this.assets[asset.data] = asset;\n  }\n\n  deleteAsset(asset) {\n    delete this.assets[asset];\n  }\n\n  render() {\n    Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx * 48, 64)); // debugger;\n    // this.ctx.drawImage(this.assets.undefined, 64, 64);\n  }\n\n}\n\nexport default Animator;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/animator.js"],"names":["debug","Animator","constructor","ctx","spriteSheet","assets","generateSprites","window","i","config","rows","j","cols","createImageBitmap","img","frame","width","height","then","res","addAsset","asset","data","deleteAsset","render","Object","values","forEach","sprite","idx","drawImage"],"mappings":"AAAA,SAASA,KAAT,QAAsB,MAAtB;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAAEC,GAAF,EAAOC,WAAP,EAAoB;AAC3B,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKG,eAAL,CAAqBF,WAArB,EAH2B,CAGQ;;AACnCG,IAAAA,MAAM,CAACF,MAAP,GAAgB,KAAKA,MAArB;AACH;;AAEDC,EAAAA,eAAe,CAAEF,WAAF,EAAe;AAC1B;AACA;AACA;AACA;AACA;AACI;AAEJ,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAZ,CAAmBC,IAAvC,EAA6CF,CAAC,EAA9C,EAAkD;AAC9C,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,WAAW,CAACK,MAAZ,CAAmBG,IAAvC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9CE,QAAAA,iBAAiB,CACbT,WAAW,CAACU,GADC,EACmB;AAChCN,QAAAA,CAAC,GAAGJ,WAAW,CAACW,KAAZ,CAAkBC,KAFT,EAEmB;AAChCL,QAAAA,CAAC,GAAGP,WAAW,CAACW,KAAZ,CAAkBE,MAHT,EAGmB;AAChCb,QAAAA,WAAW,CAACW,KAAZ,CAAkBC,KAJL,EAImB;AAChCZ,QAAAA,WAAW,CAACW,KAAZ,CAAkBE,MALL,CAKmB;AALnB,SAAjB,CAMEC,IANF,CAMSC,GAAD,IAAS;AACb,eAAKC,QAAL,CAAcD,GAAd,EADa,CAEb;AACH,SATD;AAUH;AACJ;AAEJ;;AAEDC,EAAAA,QAAQ,CAAEC,KAAF,EAAS;AACb,SAAKhB,MAAL,CAAYgB,KAAK,CAACC,IAAlB,IAA0BD,KAA1B;AACH;;AAEDE,EAAAA,WAAW,CAAEF,KAAF,EAAS;AAChB,WAAO,KAAKhB,MAAL,CAAYgB,KAAZ,CAAP;AACH;;AAEDG,EAAAA,MAAM,GAAI;AACNC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKrB,MAAnB,EAA2BsB,OAA3B,CAAmC,CAACC,MAAD,EAASC,GAAT,KAAiB,KAAK1B,GAAL,CAAS2B,SAAT,CAAmBF,MAAnB,EAA2BC,GAAG,GAAC,EAA/B,EAAmC,EAAnC,CAApD,EADM,CAEN;AACA;AACH;;AA7CU;;AAgDf,eAAe5B,QAAf","sourcesContent":["import { debug } from \"util\";\n\nclass Animator {\n    constructor (ctx, spriteSheet) {\n        this.assets = {};\n        this.ctx = ctx;\n        this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n        window.assets = this.assets;\n    }\n\n    generateSprites (spriteSheet) {\n        // const output = [];\n        // debugger;\n        // let imgBM = createImageBitmap(spriteSheet.img, { premultiplyAlpha: 'premultiply' }).then((res) => {\n        //     this.addAsset(res);\n        //     this.render();\n            // debugger;\n\n        for (let i = 0; i < spriteSheet.config.rows; i++) {\n            for (let j = 0; j < spriteSheet.config.cols; j++) {\n                createImageBitmap(\n                    spriteSheet.img,                // img data\n                    i * spriteSheet.frame.width,    // sx: \n                    j * spriteSheet.frame.height,   // sy:\n                    spriteSheet.frame.width,        // sw:\n                    spriteSheet.frame.height        // sh:\n                ).then( (res) => {\n                    this.addAsset(res);\n                    // this.render();\n                });\n            }\n        }\n        \n    }\n    \n    addAsset (asset) {\n        this.assets[asset.data] = asset;\n    }\n\n    deleteAsset (asset) {\n        delete this.assets[asset];\n    }\n    \n    render () {\n        Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx*48, 64));\n        // debugger;\n        // this.ctx.drawImage(this.assets.undefined, 64, 64);\n    }\n}\n\nexport default Animator;"]},"metadata":{},"sourceType":"module"}