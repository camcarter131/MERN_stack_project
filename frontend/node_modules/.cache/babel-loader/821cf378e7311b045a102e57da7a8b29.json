{"ast":null,"code":"export default class Bomb {\n  static renderBomb(ctx, position) {\n    ctx.fillStyle = \"#ff0000\";\n    ctx.fillRect(position[0], position[1], 48, 48);\n  }\n\n  static renderExplosion(ctx, position) {\n    ctx.fillStyle = \"#ffff00\";\n    ctx.fillRect(position[0], position[1], 48, 48);\n  }\n\n  constructor(player) {\n    // this.img = '';\n    // this.flickerIntervalId = null;\n    // this.ctx = ctx;\n    // this.grid = grid;\n    this.player = player;\n    this.deploy = this.deploy.bind(this); // this.explode = this.explode.bind(this);\n    // this.flicker = this.flicker.bind(this);\n  } // static createBomb(grid, playerPosition, explosionSize) {\n  //     \n  //     Bomb.deploy(Grid.gridArray, position);\n  //     setTimeout(() => Bomb.explode(Grid.gridArray, position, explosionSize), 3000);\n  //     // setTimeout(this.flicker, 2000);\n  // }\n\n\n  deploy() {\n    const position = this.player.grid.canvasToArray([this.player.position.x, this.player.position.y]);\n    this.player.grid.gridArray[position[0]][position[1]] = 'B';\n    let row = position[0];\n    let col = position[1];\n    let gridArray = this.player.grid.gridArray;\n    setTimeout(() => {\n      this.player.grid.gridArray[position[0]][position[1]] = 'E';\n      if (row - 1 >= 1 && gridArray[row - 1][col] != 'W') gridArray[row - 1][col] = 'E';\n      if (row + 1 <= 15 && gridArray[row + 1][col] != 'W') gridArray[row + 1][col] = 'E';\n      if (col - 1 >= 1 && gridArray[row][col - 1] != 'W') gridArray[row][col - 1] = 'E';\n      if (col + 1 <= 15 && gridArray[row][col + 1] != 'W') gridArray[row][col + 1] = 'E';\n    }, 2000);\n    setTimeout(() => {\n      this.player.bombs.pickUp(this);\n      if (row - 1 >= 1 && gridArray[row - 1][col] != 'W') gridArray[row - 1][col] = 'X';\n      if (row + 1 <= 15 && gridArray[row + 1][col] != 'W') gridArray[row + 1][col] = 'X';\n      if (col - 1 >= 1 && gridArray[row][col - 1] != 'W') gridArray[row][col - 1] = 'X';\n      if (col + 1 <= 15 && gridArray[row][col + 1] != 'W') gridArray[row][col + 1] = 'X';\n      this.player.grid.gridArray[position[0]][position[1]] = 'X';\n    }, 3000);\n  } // explode(gridArray, position, explosionSize) {\n  //     let row = position[0];\n  //     let col = position[1];\n  //     gridArray[row][col] = 'E';\n  // }\n  // flicker() {\n  //     this.flickerIntervalId = setInterval(() => { }, 100);\n  // }\n\n\n}","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/bombs/bomb.js"],"names":["Bomb","renderBomb","ctx","position","fillStyle","fillRect","renderExplosion","constructor","player","deploy","bind","grid","canvasToArray","x","y","gridArray","row","col","setTimeout","bombs","pickUp"],"mappings":"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","sourcesContent":["export default class Bomb {\n\n    static renderBomb(ctx, position){\n        ctx.fillStyle = \"#ff0000\";\n        ctx.fillRect(position[0], position[1], 48, 48);\n    }\n\n    static renderExplosion(ctx, position){\n        ctx.fillStyle = \"#ffff00\";\n        ctx.fillRect(position[0], position[1], 48, 48);\n    }\n\n    constructor(player) {\n        // this.img = '';\n        // this.flickerIntervalId = null;\n        // this.ctx = ctx;\n        // this.grid = grid;\n        this.player = player;\n        this.deploy = this.deploy.bind(this);\n        \n        // this.explode = this.explode.bind(this);\n        // this.flicker = this.flicker.bind(this);\n    }\n\n\n    // static createBomb(grid, playerPosition, explosionSize) {\n    //     \n\n        \n    //     Bomb.deploy(Grid.gridArray, position);\n    //     setTimeout(() => Bomb.explode(Grid.gridArray, position, explosionSize), 3000);\n\n    //     // setTimeout(this.flicker, 2000);\n    // }\n\n    deploy() {\n        const position = this.player.grid.canvasToArray([this.player.position.x, this.player.position.y]);\n        this.player.grid.gridArray[position[0]][position[1]] = 'B';\n        let row = position[0];\n        let col = position[1];\n        let gridArray = this.player.grid.gridArray;\n        \n        setTimeout(() => {\n            this.player.grid.gridArray[position[0]][position[1]] = 'E';\n\n\n            if (row - 1 >= 1 && gridArray[row - 1][col] != 'W') gridArray[row - 1][col] = 'E';\n            if (row + 1 <= 15 && gridArray[row + 1][col] != 'W') gridArray[row + 1][col] = 'E';\n            if (col - 1 >= 1 && gridArray[row][col - 1] != 'W') gridArray[row][col - 1] = 'E';\n            if (col + 1 <= 15 && gridArray[row][col + 1] != 'W') gridArray[row][col + 1] = 'E';\n            \n        }, 2000);\n        \n        setTimeout(() => {\n               this.player.bombs.pickUp(this);\n            \n                if (row - 1 >= 1 && gridArray[row - 1][col] != 'W') gridArray[row - 1][col] = 'X';\n                if (row + 1 <= 15 && gridArray[row + 1][col] != 'W') gridArray[row + 1][col] = 'X';\n                if (col - 1 >= 1 && gridArray[row][col - 1] != 'W') gridArray[row][col - 1] = 'X';\n                if (col + 1 <= 15 && gridArray[row][col + 1] != 'W') gridArray[row][col + 1] = 'X';\n                this.player.grid.gridArray[position[0]][position[1]] = 'X';\n            }, 3000);\n        \n    }\n\n    // explode(gridArray, position, explosionSize) {\n    //     let row = position[0];\n    //     let col = position[1];\n\n    //     gridArray[row][col] = 'E';\n\n    \n    // }\n    \n\n    // flicker() {\n    //     this.flickerIntervalId = setInterval(() => { }, 100);\n    // }\n\n}"]},"metadata":{},"sourceType":"module"}