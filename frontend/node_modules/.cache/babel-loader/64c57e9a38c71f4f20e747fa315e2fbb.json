{"ast":null,"code":"import { debug } from \"util\";\n\nclass Animator {\n  constructor(ctx, spriteSheet) {\n    this.assets = {};\n    this.ctx = ctx;\n    this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n\n    window.assets = this.assets;\n  }\n\n  generateSprites(spriteSheet) {\n    var resolver;\n    var promise = new Promise(function (arg) {\n      resolver = arg;\n    }); // const output = [];\n    // debugger;\n\n    createImageBitmap(spriteSheet.img, 0, 0, 64, 64).then(res => {\n      this.addAsset(res);\n      this.render();\n    }); // debugger;\n    // for (let i = 0; i < spriteSheet.config.rows; i++) {\n    //     for (let j = 0; j < spriteSheet.config.cols; j++) {\n    //         createImageBitmap(\n    //             spriteSheet.img,                // img data\n    //             i * spriteSheet.frame.width,    // sx: \n    //             j * spriteSheet.frame.height,   // sy:\n    //             spriteSheet.frame.width,        // sw:\n    //             spriteSheet.frame.height        // sh:\n    //         ).then( (res) => {\n    //             this.addAsset(res);\n    //             // this.render();\n    //         });\n    //     }\n    // }\n  }\n\n  addAsset(asset) {\n    this.assets[asset.data] = asset;\n  }\n\n  deleteAsset(asset) {\n    delete this.assets[asset];\n  }\n\n  render() {\n    Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx * 48, 64)); // debugger;\n    // this.ctx.drawImage(this.assets.undefined, 64, 64);\n  }\n\n}\n\nexport default Animator;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/animator.js"],"names":["debug","Animator","constructor","ctx","spriteSheet","assets","generateSprites","window","resolver","promise","Promise","arg","createImageBitmap","img","then","res","addAsset","render","asset","data","deleteAsset","Object","values","forEach","sprite","idx","drawImage"],"mappings":"AAAA,SAASA,KAAT,QAAsB,MAAtB;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAAEC,GAAF,EAAOC,WAAP,EAAoB;AAC3B,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKG,eAAL,CAAqBF,WAArB,EAH2B,CAGQ;;AACnCG,IAAAA,MAAM,CAACF,MAAP,GAAgB,KAAKA,MAArB;AACH;;AAEDC,EAAAA,eAAe,CAAEF,WAAF,EAAe;AAC1B,QAAII,QAAJ;AACA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,GAAV,EAAe;AAAEH,MAAAA,QAAQ,GAAGG,GAAX;AAAgB,KAA7C,CAAd,CAF0B,CAG1B;AACA;;AACAC,IAAAA,iBAAiB,CAACR,WAAW,CAACS,GAAb,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,CAAjB,CAAiDC,IAAjD,CAAuDC,GAAD,IAAS;AAC3D,WAAKC,QAAL,CAAcD,GAAd;AACA,WAAKE,MAAL;AACH,KAHD,EAL0B,CAStB;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;AAEDD,EAAAA,QAAQ,CAAEE,KAAF,EAAS;AACb,SAAKb,MAAL,CAAYa,KAAK,CAACC,IAAlB,IAA0BD,KAA1B;AACH;;AAEDE,EAAAA,WAAW,CAAEF,KAAF,EAAS;AAChB,WAAO,KAAKb,MAAL,CAAYa,KAAZ,CAAP;AACH;;AAEDD,EAAAA,MAAM,GAAI;AACNI,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKjB,MAAnB,EAA2BkB,OAA3B,CAAmC,CAACC,MAAD,EAASC,GAAT,KAAiB,KAAKtB,GAAL,CAASuB,SAAT,CAAmBF,MAAnB,EAA2BC,GAAG,GAAC,EAA/B,EAAmC,EAAnC,CAApD,EADM,CAEN;AACA;AACH;;AAhDU;;AAmDf,eAAexB,QAAf","sourcesContent":["import { debug } from \"util\";\n\nclass Animator {\n    constructor (ctx, spriteSheet) {\n        this.assets = {};\n        this.ctx = ctx;\n        this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n        window.assets = this.assets;\n    }\n\n    generateSprites (spriteSheet) {\n        var resolver;\n        var promise = new Promise(function (arg) { resolver = arg });\n        // const output = [];\n        // debugger;\n        createImageBitmap(spriteSheet.img, 0, 0, 64, 64).then((res) => {\n            this.addAsset(res);\n            this.render();\n        });\n            // debugger;\n\n        // for (let i = 0; i < spriteSheet.config.rows; i++) {\n        //     for (let j = 0; j < spriteSheet.config.cols; j++) {\n        //         createImageBitmap(\n        //             spriteSheet.img,                // img data\n        //             i * spriteSheet.frame.width,    // sx: \n        //             j * spriteSheet.frame.height,   // sy:\n        //             spriteSheet.frame.width,        // sw:\n        //             spriteSheet.frame.height        // sh:\n        //         ).then( (res) => {\n        //             this.addAsset(res);\n        //             // this.render();\n        //         });\n        //     }\n        // }\n        \n    }\n    \n    addAsset (asset) {\n        this.assets[asset.data] = asset;\n    }\n\n    deleteAsset (asset) {\n        delete this.assets[asset];\n    }\n    \n    render () {\n        Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx*48, 64));\n        // debugger;\n        // this.ctx.drawImage(this.assets.undefined, 64, 64);\n    }\n}\n\nexport default Animator;"]},"metadata":{},"sourceType":"module"}