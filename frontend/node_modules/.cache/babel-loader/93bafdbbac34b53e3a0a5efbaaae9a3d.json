{"ast":null,"code":"import Grid from \"./grid\";\nimport Player from \"./player/player\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\n\nclass Game {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.rm = new ResourceManager();\n    this.grid = new Grid(canvas, ctx); // this.player = new Player(canvas, ctx);\n\n    window.gridArray = this.grid.gridArray;\n    this.initialTime = Date.now();\n    this.rm.load(\"assets/images/df_bomber_ss.png\");\n    this.rm.onReady(this.init.bind(this));\n    this.init();\n  }\n\n  init() {\n    this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid);\n    this.start();\n  }\n\n  update(dt) {\n    this.player.update(dt); // this.sprite.update(dt);\n  }\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // this.grid.drawGrid();\n\n    this.grid.renderGame();\n    this.player.render(); // this.sprite.render();\n  }\n\n  start() {\n    let time = Date.now();\n    let dt = (time - this.initialTime) / 1000.0;\n    this.update(dt);\n    this.render();\n    this.initialTime = time;\n    requestAnimationFrame(this.start.bind(this));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/cameroncarter/Desktop/aA-flex/frontend/src/bummerman/game.js"],"names":["Grid","Player","ResourceManager","Game","constructor","canvas","ctx","rm","grid","window","gridArray","initialTime","Date","now","load","onReady","init","bind","player","get","start","update","dt","render","clearRect","width","height","renderGame","time","requestAnimationFrame"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEA,SAAKC,EAAL,GAAU,IAAIL,eAAJ,EAAV;AAEA,SAAKM,IAAL,GAAY,IAAIR,IAAJ,CAASK,MAAT,EAAiBC,GAAjB,CAAZ,CANsB,CAOtB;;AACAG,IAAAA,MAAM,CAACC,SAAP,GAAmB,KAAKF,IAAL,CAAUE,SAA7B;AAEA,SAAKC,WAAL,GAAmBC,IAAI,CAACC,GAAL,EAAnB;AAGA,SAAKN,EAAL,CAAQO,IAAR,CAAa,gCAAb;AACA,SAAKP,EAAL,CAAQQ,OAAR,CAAgB,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAhB;AAGA,SAAKD,IAAL;AACH;;AAEDA,EAAAA,IAAI,GAAI;AACJ,SAAKE,MAAL,GAAc,IAAIjB,MAAJ,CAAW,KAAKI,MAAhB,EAAwB,KAAKC,GAA7B,EAAkC,KAAKC,EAAL,CAAQY,GAAR,CAAY,gCAAZ,CAAlC,EAAiF,KAAKX,IAAtF,CAAd;AACA,SAAKY,KAAL;AACH;;AAEDC,EAAAA,MAAM,CAAEC,EAAF,EAAM;AACR,SAAKJ,MAAL,CAAYG,MAAZ,CAAmBC,EAAnB,EADQ,CAER;AACH;;AAEDC,EAAAA,MAAM,GAAI;AACN,SAAKjB,GAAL,CAASkB,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKnB,MAAL,CAAYoB,KAArC,EAA4C,KAAKpB,MAAL,CAAYqB,MAAxD,EADM,CAGN;;AACA,SAAKlB,IAAL,CAAUmB,UAAV;AAEA,SAAKT,MAAL,CAAYK,MAAZ,GANM,CAQN;AACH;;AAEDH,EAAAA,KAAK,GAAI;AACL,QAAIQ,IAAI,GAAGhB,IAAI,CAACC,GAAL,EAAX;AACA,QAAIS,EAAE,GAAG,CAACM,IAAI,GAAG,KAAKjB,WAAb,IAA4B,MAArC;AAEA,SAAKU,MAAL,CAAYC,EAAZ;AACA,SAAKC,MAAL;AAEA,SAAKZ,WAAL,GAAmBiB,IAAnB;AACAC,IAAAA,qBAAqB,CAAC,KAAKT,KAAL,CAAWH,IAAX,CAAgB,IAAhB,CAAD,CAArB;AACH;;AAnDM;;AAuDX,eAAed,IAAf","sourcesContent":["import Grid from \"./grid\";\nimport Player from \"./player/player\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\n\nclass Game {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n\n        this.rm = new ResourceManager();\n\n        this.grid = new Grid(canvas, ctx);\n        // this.player = new Player(canvas, ctx);\n        window.gridArray = this.grid.gridArray;\n\n        this.initialTime = Date.now();\n\n        \n        this.rm.load(\"assets/images/df_bomber_ss.png\");\n        this.rm.onReady(this.init.bind(this));\n        \n        \n        this.init();\n    }\n\n    init () {\n        this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid);\n        this.start();\n    }\n    \n    update (dt) {\n        this.player.update(dt);\n        // this.sprite.update(dt);\n    }\n    \n    render () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // this.grid.drawGrid();\n        this.grid.renderGame();\n        \n        this.player.render();\n\n        // this.sprite.render();\n    }\n\n    start () {\n        let time = Date.now();\n        let dt = (time - this.initialTime) / 1000.0;    \n\n        this.update(dt);\n        this.render();\n\n        this.initialTime = time;\n        requestAnimationFrame(this.start.bind(this));\n    }\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}