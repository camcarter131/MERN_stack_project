{"ast":null,"code":"import Bomb from './bomb';\nimport { DOWN, UP, RIGHT, LEFT } from './keys';\nimport Input from './input';\nimport Sprite from './animator/sprite';\n\nclass Player extends Sprite {\n  constructor(canvas, ctx, img) {\n    super(canvas, ctx, img); // this.radius = ((canvas.width / 15) * (0.75)) / 2;\n    // this.ctx = ctx;\n\n    this.position.x = canvas.width / 2 + 48;\n    this.position.y = canvas.width / 2 + 48; // this.width = canvas.width/15.0;\n    // this.height = canvas.height/15.0;\n    // this.speed = 100;\n    // this.velocity = {\n    //     x: 0,\n    //     y: 0\n    // };\n    // this.color = '#2a52be';\n\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this);\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.position.y += this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.position.y -= this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.position.x += this.velocity.x * dt;\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.position.x -= this.velocity.x * dt;\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt);\n  }\n\n  render() {\n    this.ctx.fillStyle = this.color;\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n\n  renderBomb() {\n    let x = this.position.x - this.width;\n    let y = this.position.y - this.height;\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n    setTimeout(() => {\n      this.ctx.fillStyle = \"#ffffff\";\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }, 2000);\n  }\n\n  dropBomb() {\n    let bomb = new Bomb(this.ctx, this.position);\n    bomb.render();\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player.js"],"names":["Bomb","DOWN","UP","RIGHT","LEFT","Input","Sprite","Player","constructor","canvas","ctx","img","position","x","width","y","erase","bind","inputHandler","handleInput","dt","isPressed","velocity","clearRect","height","update","render","fillStyle","color","beginPath","arc","radius","Math","PI","closePath","fill","renderBomb","setTimeout","dropBomb","bomb"],"mappings":"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","sourcesContent":["import Bomb from './bomb';\nimport { DOWN, UP, RIGHT, LEFT } from './keys';\nimport Input from './input';\nimport Sprite from './animator/sprite';\n\nclass Player extends Sprite {\n    constructor (canvas, ctx, img) {\n        super (canvas, ctx, img);\n        // this.radius = ((canvas.width / 15) * (0.75)) / 2;\n        // this.ctx = ctx;\n\n        this.position.x = (canvas.width/2) + 48;\n        this.position.y = (canvas.width/2) + 48;\n\n        // this.width = canvas.width/15.0;\n        // this.height = canvas.height/15.0;\n        \n        // this.speed = 100;\n        // this.velocity = {\n        //     x: 0,\n        //     y: 0\n        // };\n\n        // this.color = '#2a52be';\n        this.erase = this.erase.bind(this);\n\n        this.inputHandler = new Input(this);\n    }\n\n    handleInput(dt) {\n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.position.y += this.velocity.y * dt;\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.position.y -= this.velocity.y * dt;\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.position.x += this.velocity.x * dt;\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.position.x -= this.velocity.x * dt;\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n    }\n\n    render () {\n        this.ctx.fillStyle = this.color;\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n    }\n\n    renderBomb() {\n        let x = this.position.x - this.width; \n        let y = this.position.y -this.height;\n        this.ctx.fillStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n        setTimeout(() => {\n            this.ctx.fillStyle = \"#ffffff\";\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }, 2000);\n    }\n        \n\n    dropBomb () {\n        let bomb = new Bomb(this.ctx, this.position);\n        bomb.render();\n    }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}