{"ast":null,"code":"import Grid from \"./grid\";\nimport Player from \"./player/player\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\nimport SpriteSheet from \"./animator/spritesheet\";\nimport Animator from \"./animator/animator\";\n\nclass Game {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.rm = new ResourceManager();\n    this.grid = new Grid(canvas, ctx);\n    this.initialTime = Date.now();\n    this.rm.load(\"assets/images/df_bomber_ss.png\");\n    this.rm.onReady(this.init.bind(this));\n    this.init();\n  }\n\n  init() {\n    // this.animator = new Animator(this.ctx, new SpriteSheet(this.rm.get(\"assets/images/df_bomber_ss.png\"), { rows: 4, cols: 3 }));\n    // this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid);\n    this.start();\n  }\n\n  update(dt) {// this.player.update(dt);\n    // this.sprite.update(dt);\n  }\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.grid.drawGrid();\n    this.grid.renderGame(); // this.player.render();\n    // this.sprite.render();\n  }\n\n  start() {\n    let time = Date.now();\n    let dt = (time - this.initialTime) / 1000.0;\n    this.update(dt);\n    this.render();\n    this.initialTime = time;\n    requestAnimationFrame(this.start.bind(this));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/game.js"],"names":["Grid","Player","ResourceManager","SpriteSheet","Animator","Game","constructor","canvas","ctx","rm","grid","initialTime","Date","now","load","onReady","init","bind","start","update","dt","render","clearRect","width","height","drawGrid","renderGame","time","requestAnimationFrame"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEA,SAAKC,EAAL,GAAU,IAAIP,eAAJ,EAAV;AACA,SAAKQ,IAAL,GAAY,IAAIV,IAAJ,CAASO,MAAT,EAAiBC,GAAjB,CAAZ;AAEA,SAAKG,WAAL,GAAmBC,IAAI,CAACC,GAAL,EAAnB;AAEA,SAAKJ,EAAL,CAAQK,IAAR,CAAa,gCAAb;AACA,SAAKL,EAAL,CAAQM,OAAR,CAAgB,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAhB;AAEA,SAAKD,IAAL;AACH;;AAEDA,EAAAA,IAAI,GAAI;AACJ;AACA;AACA,SAAKE,KAAL;AACH;;AAEDC,EAAAA,MAAM,CAAEC,EAAF,EAAM,CACR;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAI;AACN,SAAKb,GAAL,CAASc,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKf,MAAL,CAAYgB,KAArC,EAA4C,KAAKhB,MAAL,CAAYiB,MAAxD;AAEA,SAAKd,IAAL,CAAUe,QAAV;AACA,SAAKf,IAAL,CAAUgB,UAAV,GAJM,CAMN;AAEA;AACH;;AAEDR,EAAAA,KAAK,GAAI;AACL,QAAIS,IAAI,GAAGf,IAAI,CAACC,GAAL,EAAX;AACA,QAAIO,EAAE,GAAG,CAACO,IAAI,GAAG,KAAKhB,WAAb,IAA4B,MAArC;AAEA,SAAKQ,MAAL,CAAYC,EAAZ;AACA,SAAKC,MAAL;AAEA,SAAKV,WAAL,GAAmBgB,IAAnB;AACAC,IAAAA,qBAAqB,CAAC,KAAKV,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAD,CAArB;AACH;;AA/CM;;AAmDX,eAAeZ,IAAf","sourcesContent":["import Grid from \"./grid\";\nimport Player from \"./player/player\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\nimport SpriteSheet from \"./animator/spritesheet\";\nimport Animator from \"./animator/animator\";\n\nclass Game {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n\n        this.rm = new ResourceManager();\n        this.grid = new Grid(canvas, ctx);\n\n        this.initialTime = Date.now();\n\n        this.rm.load(\"assets/images/df_bomber_ss.png\");\n        this.rm.onReady(this.init.bind(this));\n        \n        this.init();\n    }\n\n    init () {\n        // this.animator = new Animator(this.ctx, new SpriteSheet(this.rm.get(\"assets/images/df_bomber_ss.png\"), { rows: 4, cols: 3 }));\n        // this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid);\n        this.start();\n    }\n    \n    update (dt) {\n        // this.player.update(dt);\n        // this.sprite.update(dt);\n    }\n    \n    render () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        this.grid.drawGrid();\n        this.grid.renderGame();\n        \n        // this.player.render();\n\n        // this.sprite.render();\n    }\n\n    start () {\n        let time = Date.now();\n        let dt = (time - this.initialTime) / 1000.0;    \n\n        this.update(dt);\n        this.render();\n\n        this.initialTime = time;\n        requestAnimationFrame(this.start.bind(this));\n    }\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}