{"ast":null,"code":"import { debug } from \"util\";\n\nclass Animator {\n  constructor(ctx, spriteSheet) {\n    this.assets = {};\n    this.ctx = ctx;\n    this.generateSprites(spriteSheet).forEach(sprite => this.addAsset(sprite));\n    debugger;\n  }\n\n  generateSprites(spriteSheet) {\n    const output = [];\n    debugger;\n    const c = new OffscreenCanvas(spriteSheet.width, spriteSheet.height);\n    const cc = c.getContext('2d');\n    cc.drawImage(spriteSheet, 0, 0, 96, 96, 0, 0, 96, 96);\n    let imgBM = createImageBitmap(spriteSheet, {\n      premultiplyAlpha: 'premultiply'\n    }).then(() => {\n      output.push(imgBM);\n      return output;\n    });\n  }\n\n  addAsset(asset) {\n    this.assets[asset.data] = asset;\n  }\n\n  deleteAsset(asset) {\n    delete this.assets[asset];\n  }\n\n  render() {// Object.values(this.assets).forEach((sprite, idx) => this.ctx.putImageData(sprite, idx*48, 64));\n  }\n\n}\n\nexport default Animator;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/animator.js"],"names":["debug","Animator","constructor","ctx","spriteSheet","assets","generateSprites","forEach","sprite","addAsset","output","c","OffscreenCanvas","width","height","cc","getContext","drawImage","imgBM","createImageBitmap","premultiplyAlpha","then","push","asset","data","deleteAsset","render"],"mappings":"AAAA,SAASA,KAAT,QAAsB,MAAtB;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAAEC,GAAF,EAAOC,WAAP,EAAoB;AAC3B,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKG,eAAL,CAAqBF,WAArB,EAAkCG,OAAlC,CAA0CC,MAAM,IAAI,KAAKC,QAAL,CAAcD,MAAd,CAApD;AACA;AACH;;AAEDF,EAAAA,eAAe,CAAEF,WAAF,EAAe;AAC1B,UAAMM,MAAM,GAAG,EAAf;AACA;AACA,UAAMC,CAAC,GAAG,IAAIC,eAAJ,CAAoBR,WAAW,CAACS,KAAhC,EAAuCT,WAAW,CAACU,MAAnD,CAAV;AACA,UAAMC,EAAE,GAAGJ,CAAC,CAACK,UAAF,CAAa,IAAb,CAAX;AACAD,IAAAA,EAAE,CAACE,SAAH,CAAab,WAAb,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,EAA9C,EAAkD,EAAlD;AACA,QAAIc,KAAK,GAAGC,iBAAiB,CAACf,WAAD,EAAc;AAAEgB,MAAAA,gBAAgB,EAAE;AAApB,KAAd,CAAjB,CAAoEC,IAApE,CAAyE,MAAM;AACvFX,MAAAA,MAAM,CAACY,IAAP,CAAYJ,KAAZ;AACA,aAAOR,MAAP;AACH,KAHW,CAAZ;AAIH;;AAEDD,EAAAA,QAAQ,CAAEc,KAAF,EAAS;AACb,SAAKlB,MAAL,CAAYkB,KAAK,CAACC,IAAlB,IAA0BD,KAA1B;AACH;;AAEDE,EAAAA,WAAW,CAAEF,KAAF,EAAS;AAChB,WAAO,KAAKlB,MAAL,CAAYkB,KAAZ,CAAP;AACH;;AAEDG,EAAAA,MAAM,GAAI,CACN;AACH;;AA9BU;;AAiCf,eAAezB,QAAf","sourcesContent":["import { debug } from \"util\";\n\nclass Animator {\n    constructor (ctx, spriteSheet) {\n        this.assets = {};\n        this.ctx = ctx;\n        this.generateSprites(spriteSheet).forEach(sprite => this.addAsset(sprite));\n        debugger;\n    }\n\n    generateSprites (spriteSheet) {\n        const output = [];\n        debugger;\n        const c = new OffscreenCanvas(spriteSheet.width, spriteSheet.height);\n        const cc = c.getContext('2d');\n        cc.drawImage(spriteSheet, 0, 0, 96, 96, 0, 0, 96, 96);\n        let imgBM = createImageBitmap(spriteSheet, { premultiplyAlpha: 'premultiply' }).then(() => {\n            output.push(imgBM);\n            return output;\n        });\n    }\n    \n    addAsset (asset) {\n        this.assets[asset.data] = asset;\n    }\n\n    deleteAsset (asset) {\n        delete this.assets[asset];\n    }\n    \n    render () {\n        // Object.values(this.assets).forEach((sprite, idx) => this.ctx.putImageData(sprite, idx*48, 64));\n    }\n}\n\nexport default Animator;"]},"metadata":{},"sourceType":"module"}