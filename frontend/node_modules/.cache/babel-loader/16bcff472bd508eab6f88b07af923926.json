{"ast":null,"code":"import Bombs from '../bombs/bombs';\nimport { DOWN, UP, RIGHT, LEFT, SPACE } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player {\n  //extends Sprite {\n  constructor(canvas, ctx, img, grid) {\n    this.position = {\n      x: 16 + 48,\n      y: canvas.height - 34 - 48\n    };\n    this.renderSize = 48;\n    this.radius = this.renderSize / 2;\n    this.radius_partial = Math.sqrt(this.radius ** 2 / 2);\n    this.grid = grid;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this);\n    this.bombs = new Bombs(this);\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(SPACE)) {\n      this.bombs.deploy();\n    }\n\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y += this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y -= this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x += this.velocity.x * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x -= this.velocity.x * dt;\n      }\n    }\n  }\n\n  update(dt) {\n    console.log('updating player'); // this.handleInput(dt);\n    // this.animation.update(dt);\n  }\n\n  render() {} // debugger;\n  // super.render();\n  // this.animation.render(\"y\", 1);\n  // render () {\n  //     this.ctx.fillStyle = this.color;\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  // }\n  // renderBomb() {\n  //     let x = this.position.x - this.width; \n  //     let y = this.position.y -this.height;\n  //     this.ctx.fillStyle = \"#000000\";\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  //     setTimeout(() => {\n  //         this.ctx.fillStyle = \"#ffffff\";\n  //         this.ctx.beginPath();\n  //         this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n  //         this.ctx.closePath();\n  //         this.ctx.fill();\n  //     }, 2000);\n  // }\n  // dropBomb () {\n  //     let bomb = new Bomb(this.ctx, this.position);\n  //     bomb.render();\n  // }\n\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player/player.js"],"names":["Bombs","DOWN","UP","RIGHT","LEFT","SPACE","Input","Sprite","Animation","Player","constructor","canvas","ctx","img","grid","position","x","y","height","renderSize","radius","radius_partial","Math","sqrt","erase","bind","inputHandler","bombs","handleInput","dt","isPressed","deploy","velocity","speed","gridCoords","canvasToArray","gridArray","update","console","log","render"],"mappings":"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","sourcesContent":["import Bombs from '../bombs/bombs'\nimport { DOWN, UP, RIGHT, LEFT, SPACE } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player { //extends Sprite {\n    constructor (canvas, ctx, img, grid) {\n        this.position = {\n            x: 16 + 48,\n            y: canvas.height - 34 - 48\n        }\n        \n        this.renderSize = 48;\n        this.radius = this.renderSize/2; \n        this.radius_partial = Math.sqrt((this.radius**2)/2);\n        this.grid = grid;\n        this.erase = this.erase.bind(this);\n        this.inputHandler = new Input(this);\n        this.bombs = new Bombs(this);\n    }\n\n    handleInput(dt) {\n\n        if (this.inputHandler.isPressed(SPACE)) {\n            this.bombs.deploy();\n        }\n        \n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || \n                this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                    return null;\n            } else {\n                this.position.y += this.velocity.y * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n                || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                    return null;\n            } else {\n                this.position.y -= this.velocity.y * dt;\n            }\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]);\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n                || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                    return null;\n            } else {\n                this.position.x += this.velocity.x * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]);\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n                || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                    return null;\n            } else {\n                this.position.x -= this.velocity.x * dt;\n            }\n        }\n    }\n\n    update (dt) {\n        console.log('updating player');\n        // this.handleInput(dt);\n        // this.animation.update(dt);\n    }\n\n    render () {\n        // debugger;\n        // super.render();\n        // this.animation.render(\"y\", 1);\n    }\n\n    // render () {\n    //     this.ctx.fillStyle = this.color;\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    // }\n\n    // renderBomb() {\n    //     let x = this.position.x - this.width; \n    //     let y = this.position.y -this.height;\n    //     this.ctx.fillStyle = \"#000000\";\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    //     setTimeout(() => {\n    //         this.ctx.fillStyle = \"#ffffff\";\n    //         this.ctx.beginPath();\n    //         this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n    //         this.ctx.closePath();\n    //         this.ctx.fill();\n    //     }, 2000);\n    // }\n        \n\n    // dropBomb () {\n    //     let bomb = new Bomb(this.ctx, this.position);\n    //     bomb.render();\n    // }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}