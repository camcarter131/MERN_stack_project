{"ast":null,"code":"import Sprite from \"../player/sprite\";\n\nclass SpriteSheet {\n  constructor(img, config) {\n    this.img = img;\n    this.config = config || {\n      rows: 0,\n      cols: 0,\n      name: 'sprite'\n    };\n    this.frame = {\n      width: Math.floor(this.img.width / (this.config.cols || 1)),\n      height: Math.floor(this.img.height / (this.config.rows || 1))\n    }; // debugger;\n  } // generateSprites() {\n  //     // debugger;\n  //     // this.tmpCanvas = new OffscreenCanvas(this.img.width, this.img.height);\n  //     // this.tmpcc = this.tmpCanvas.getContext('2d');\n  //     // this.tmpcc.drawImage(this.img, 0, 0);\n  //     const output = [];\n  //     // const c = document.createElement('canvas');\n  //     // c.width = this.img.width;\n  //     // c.height = this.img.height;\n  //     const c = new OffscreenCanvas(this.img.width, this.img.height);\n  //     const cc = c.getContext('2d');\n  //     cc.drawImage(this.img, 0, 0, 96, 96, 0, 0, 96, 96);\n  //     // let imgData = cc.getImageData(0, 0, 32, 32);\n  //     let imgBM = createImageBitmap(this.img,{ premultiplyAlpha: 'premultiply'}).then(() => {\n  //         output.push(imgBM);\n  //     });\n  //     // let imgData2 = cc.getImageData(32, 0, 32, 32);\n  //     // let imgData3 = cc.getImageData(64, 0, 32, 32);\n  //     // for (let i = 0; i < this.img.width / 32; i++) {\n  //     //     for (let j = 0; j < this.img.height / 32; i++) {\n  //     //         let imgData = cc.getImageData(i * this.frame.width,\n  //     //             j * this.frame.height,\n  //     //             this.frame.width,\n  //     //             this.frame.height\n  //     //         );\n  //     //         output.push(new Sprite(imgData, `bomber_${i}_${j}`));\n  //     //         debugger;\n  //     //     }\n  //     // }\n  //     // output.push(imgData2); output.push(imgData3);\n  //     output.forEach(data => {\n  //         for (let i = 0; i < data.width; i++) {\n  //             for (let j = 1; j < data.height; j++) {\n  //                 const n = ((data.width * i))\n  //             }\n  //         }\n  //     });\n  //     // debugger;\n  //     return output;\n  // }\n\n\n}\n\nexport default SpriteSheet;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/spritesheet.js"],"names":["Sprite","SpriteSheet","constructor","img","config","rows","cols","name","frame","width","Math","floor","height"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAc;AACrB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAM,IAAI;AACpBC,MAAAA,IAAI,EAAE,CADc;AAEpBC,MAAAA,IAAI,EAAE,CAFc;AAGpBC,MAAAA,IAAI,EAAE;AAHc,KAAxB;AAKA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKR,GAAL,CAASM,KAAT,IAAkB,KAAKL,MAAL,CAAYE,IAAZ,IAAoB,CAAtC,CAAX,CADE;AAETM,MAAAA,MAAM,EAAEF,IAAI,CAACC,KAAL,CAAW,KAAKR,GAAL,CAASS,MAAT,IAAmB,KAAKR,MAAL,CAAYC,IAAZ,IAAoB,CAAvC,CAAX;AAFC,KAAb,CAPqB,CAWrB;AACH,GAba,CAed;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3Dc;;AA8DlB,eAAeJ,WAAf","sourcesContent":["import Sprite from \"../player/sprite\";\n\nclass SpriteSheet {\n    constructor(img, config) {\n        this.img = img;\n        this.config = config || {\n            rows: 0,\n            cols: 0,\n            name: 'sprite'\n        };\n        this.frame = {\n            width: Math.floor(this.img.width / (this.config.cols || 1)),\n            height: Math.floor(this.img.height / (this.config.rows || 1))\n        };\n        // debugger;\n    }\n\n    // generateSprites() {\n    //     // debugger;\n    //     // this.tmpCanvas = new OffscreenCanvas(this.img.width, this.img.height);\n    //     // this.tmpcc = this.tmpCanvas.getContext('2d');\n\n    //     // this.tmpcc.drawImage(this.img, 0, 0);\n\n    //     const output = [];\n\n    //     // const c = document.createElement('canvas');\n    //     // c.width = this.img.width;\n    //     // c.height = this.img.height;\n    //     const c = new OffscreenCanvas(this.img.width, this.img.height);\n    //     const cc = c.getContext('2d');\n    //     cc.drawImage(this.img, 0, 0, 96, 96, 0, 0, 96, 96);\n\n    //     // let imgData = cc.getImageData(0, 0, 32, 32);\n    //     let imgBM = createImageBitmap(this.img,{ premultiplyAlpha: 'premultiply'}).then(() => {\n    //         output.push(imgBM);\n    //     });\n    //     // let imgData2 = cc.getImageData(32, 0, 32, 32);\n    //     // let imgData3 = cc.getImageData(64, 0, 32, 32);\n    //     // for (let i = 0; i < this.img.width / 32; i++) {\n    //     //     for (let j = 0; j < this.img.height / 32; i++) {\n    //     //         let imgData = cc.getImageData(i * this.frame.width,\n    //     //             j * this.frame.height,\n    //     //             this.frame.width,\n    //     //             this.frame.height\n    //     //         );\n    //     //         output.push(new Sprite(imgData, `bomber_${i}_${j}`));\n    //     //         debugger;\n    //     //     }\n    //     // }\n    //     // output.push(imgData2); output.push(imgData3);\n    //     output.forEach(data => {\n    //         for (let i = 0; i < data.width; i++) {\n    //             for (let j = 1; j < data.height; j++) {\n    //                 const n = ((data.width * i))\n    //             }\n    //         }\n    //     });\n    //     // debugger;\n\n    //     return output;\n    // }\n}\n\nexport default SpriteSheet;"]},"metadata":{},"sourceType":"module"}