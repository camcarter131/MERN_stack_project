{"ast":null,"code":"import Grid from \"./grid\";\nimport Player from \"./player\";\nimport Sprite from \"./animator/sprite\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\n\nclass Game {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.rm = new ResourceManager();\n    this.grid = new Grid(canvas, ctx);\n    this.player = new Player(canvas, ctx);\n    this.initialTime = Date.now();\n    this.rm.load(\"assets/images/df_bomber_ss.png\");\n    this.rm.onReady(this.init.bind(this));\n    this.init();\n  }\n\n  init() {\n    this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"));\n    this.start();\n  }\n\n  update(dt) {\n    this.player.update(dt); // this.sprite.update(dt);\n  }\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.grid.drawGrid();\n    this.grid.renderGame();\n    this.player.render();\n    this.sprite.render();\n  }\n\n  start() {\n    let time = Date.now();\n    let dt = (time - this.initialTime) / 1000.0;\n    this.update(dt);\n    this.render();\n    this.initialTime = time;\n    requestAnimationFrame(this.start.bind(this));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/game.js"],"names":["Grid","Player","Sprite","ResourceManager","Game","constructor","canvas","ctx","rm","grid","player","initialTime","Date","now","load","onReady","init","bind","get","start","update","dt","render","clearRect","width","height","drawGrid","renderGame","sprite","time","requestAnimationFrame"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEA,SAAKC,EAAL,GAAU,IAAIL,eAAJ,EAAV;AAEA,SAAKM,IAAL,GAAY,IAAIT,IAAJ,CAASM,MAAT,EAAiBC,GAAjB,CAAZ;AACA,SAAKG,MAAL,GAAc,IAAIT,MAAJ,CAAWK,MAAX,EAAmBC,GAAnB,CAAd;AAEA,SAAKI,WAAL,GAAmBC,IAAI,CAACC,GAAL,EAAnB;AAGA,SAAKL,EAAL,CAAQM,IAAR,CAAa,gCAAb;AACA,SAAKN,EAAL,CAAQO,OAAR,CAAgB,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAhB;AAGA,SAAKD,IAAL;AACH;;AAEDA,EAAAA,IAAI,GAAI;AACJ,SAAKN,MAAL,GAAc,IAAIT,MAAJ,CAAW,KAAKK,MAAhB,EAAwB,KAAKC,GAA7B,EAAkC,KAAKC,EAAL,CAAQU,GAAR,CAAY,gCAAZ,CAAlC,CAAd;AACA,SAAKC,KAAL;AACH;;AAEDC,EAAAA,MAAM,CAAEC,EAAF,EAAM;AACR,SAAKX,MAAL,CAAYU,MAAZ,CAAmBC,EAAnB,EADQ,CAER;AACH;;AAEDC,EAAAA,MAAM,GAAI;AACN,SAAKf,GAAL,CAASgB,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKjB,MAAL,CAAYkB,KAArC,EAA4C,KAAKlB,MAAL,CAAYmB,MAAxD;AAEA,SAAKhB,IAAL,CAAUiB,QAAV;AACA,SAAKjB,IAAL,CAAUkB,UAAV;AAEA,SAAKjB,MAAL,CAAYY,MAAZ;AAEA,SAAKM,MAAL,CAAYN,MAAZ;AACH;;AAEDH,EAAAA,KAAK,GAAI;AACL,QAAIU,IAAI,GAAGjB,IAAI,CAACC,GAAL,EAAX;AACA,QAAIQ,EAAE,GAAG,CAACQ,IAAI,GAAG,KAAKlB,WAAb,IAA4B,MAArC;AAEA,SAAKS,MAAL,CAAYC,EAAZ;AACA,SAAKC,MAAL;AAEA,SAAKX,WAAL,GAAmBkB,IAAnB;AACAC,IAAAA,qBAAqB,CAAC,KAAKX,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAD,CAArB;AACH;;AAlDM;;AAsDX,eAAeb,IAAf","sourcesContent":["import Grid from \"./grid\";\nimport Player from \"./player\";\nimport Sprite from \"./animator/sprite\";\nimport ResourceManager from \"./resource_manager/resource_manager\";\n\nclass Game {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n\n        this.rm = new ResourceManager();\n\n        this.grid = new Grid(canvas, ctx);\n        this.player = new Player(canvas, ctx);\n\n        this.initialTime = Date.now();\n\n        \n        this.rm.load(\"assets/images/df_bomber_ss.png\");\n        this.rm.onReady(this.init.bind(this));\n        \n        \n        this.init();\n    }\n\n    init () {\n        this.player = new Player(this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"));\n        this.start();\n    }\n    \n    update (dt) {\n        this.player.update(dt);\n        // this.sprite.update(dt);\n    }\n    \n    render () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        this.grid.drawGrid();\n        this.grid.renderGame();\n        \n        this.player.render();\n\n        this.sprite.render();\n    }\n\n    start () {\n        let time = Date.now();\n        let dt = (time - this.initialTime) / 1000.0;    \n\n        this.update(dt);\n        this.render();\n\n        this.initialTime = time;\n        requestAnimationFrame(this.start.bind(this));\n    }\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}