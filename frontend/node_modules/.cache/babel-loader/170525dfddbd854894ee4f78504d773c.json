{"ast":null,"code":"const Bombs = require('../bombs/bombs');\n\nconst _require = require('../keys'),\n      DOWN = _require.DOWN,\n      UP = _require.UP,\n      RIGHT = _require.RIGHT,\n      LEFT = _require.LEFT,\n      SPACE = _require.SPACE;\n\nconst Input = require('../input');\n\nconst Sprite = require('./sprite');\n\nconst Animation = require('../animator/animation');\n\nclass Player extends Sprite {\n  constructor(position, canvas, ctx, img, grid) {\n    super(canvas, ctx, img);\n    this.position = position;\n    this.renderSize = 48;\n    this.radius = this.renderSize / 2;\n    this.radius_partial = Math.sqrt(this.radius ** 2 / 2);\n    this.grid = grid;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this); //5 refers to the total number of squares an explosion will cover\n\n    this.bombSize = 4;\n    this.bombs = new Bombs(this);\n    this.animation = new Animation(ctx, this, {\n      frames: [1, 2],\n      loop: true\n    });\n    window.bombQueue = this.bombs.bombQueue;\n  }\n\n  itemMonitoring(row, col) {\n    switch (this.grid.gridArray[row][col]) {\n      case \"I1\":\n        this.bombs.pickUpBomb();\n        setTimeout(() => this.grid.gridArray[row][col] = 'X', 500);\n        break;\n\n      case \"I2\":\n        this.speed *= 2;\n        this.grid.gridArray[row][col] = 'X';\n        setTimeout(() => {\n          this.speed /= 2;\n        }, 5000);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(SPACE)) {\n      // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n      this.bombs.deploy();\n    }\n\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n\n      this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y += this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n\n      this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y -= this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]); // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n\n      this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x += this.velocity.x * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]); // debugger\n      // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n\n      this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x -= this.velocity.x * dt;\n      }\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt); // this.animation.update(dt);\n  }\n\n  render() {\n    // debugger;\n    super.render(); // this.animation.render(\"y\", 1);\n  } // render () {\n  //     this.ctx.fillStyle = this.color;\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  // }\n  // renderBomb() {\n  //     let x = this.position.x - this.width; \n  //     let y = this.position.y -this.height;\n  //     this.ctx.fillStyle = \"#000000\";\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  //     setTimeout(() => {\n  //         this.ctx.fillStyle = \"#ffffff\";\n  //         this.ctx.beginPath();\n  //         this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n  //         this.ctx.closePath();\n  //         this.ctx.fill();\n  //     }, 2000);\n  // }\n  // dropBomb () {\n  //     let bomb = new Bomb(this.ctx, this.position);\n  //     bomb.render();\n  // }\n\n\n}\n\nmodule.exports = Player;","map":{"version":3,"sources":["/Users/cameroncarter/Desktop/aA-flex/frontend/src/bummerman/player/player.js"],"names":["Bombs","require","DOWN","UP","RIGHT","LEFT","SPACE","Input","Sprite","Animation","Player","constructor","position","canvas","ctx","img","grid","renderSize","radius","radius_partial","Math","sqrt","erase","bind","inputHandler","bombSize","bombs","animation","frames","loop","window","bombQueue","itemMonitoring","row","col","gridArray","pickUpBomb","setTimeout","speed","handleInput","dt","isPressed","deploy","velocity","y","x","gridCoords","canvasToArray","clearRect","width","height","update","render","module","exports"],"mappings":"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","sourcesContent":["const Bombs = require('../bombs/bombs');\nconst { DOWN, UP, RIGHT, LEFT, SPACE } = require('../keys');\nconst Input = require('../input');\nconst Sprite = require('./sprite');\nconst Animation = require('../animator/animation');\n\nclass Player extends Sprite {\n    constructor (position, canvas, ctx, img, grid) {\n        super (canvas, ctx, img);\n        this.position = position;\n        this.renderSize = 48;\n        this.radius = this.renderSize/2; \n        this.radius_partial = Math.sqrt((this.radius**2)/2);\n        this.grid = grid;\n        this.erase = this.erase.bind(this);\n        this.inputHandler = new Input(this);\n        //5 refers to the total number of squares an explosion will cover\n        this.bombSize = 4;\n        this.bombs = new Bombs(this);\n        this.animation = new Animation(ctx, this, { frames: [1, 2], loop: true });\n        window.bombQueue = this.bombs.bombQueue;\n    }\n\n    itemMonitoring(row, col){\n        switch(this.grid.gridArray[row][col]){\n            case \"I1\":\n                this.bombs.pickUpBomb();\n                setTimeout(() => this.grid.gridArray[row][col] = 'X', 500);\n                break;\n            case \"I2\":\n                this.speed *= 2;\n                this.grid.gridArray[row][col] = 'X';\n                setTimeout(() => {this.speed /= 2}, 5000);\n                break;\n            \n            default:\n                break;\n        }\n    }\n\n    handleInput(dt) {\n\n        if (this.inputHandler.isPressed(SPACE)) {\n            // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n            this.bombs.deploy();\n        }\n        \n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null\n            } else {\n                this.position.y += this.velocity.y * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.y -= this.velocity.y * dt;\n            }\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]);\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null\n            } else {\n                this.position.x += this.velocity.x * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]);\n            // debugger\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.x -= this.velocity.x * dt;\n            }\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n        // this.animation.update(dt);\n    }\n\n    render () {\n        // debugger;\n        super.render();\n        // this.animation.render(\"y\", 1);\n    }\n\n    // render () {\n    //     this.ctx.fillStyle = this.color;\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    // }\n\n    // renderBomb() {\n    //     let x = this.position.x - this.width; \n    //     let y = this.position.y -this.height;\n    //     this.ctx.fillStyle = \"#000000\";\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    //     setTimeout(() => {\n    //         this.ctx.fillStyle = \"#ffffff\";\n    //         this.ctx.beginPath();\n    //         this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n    //         this.ctx.closePath();\n    //         this.ctx.fill();\n    //     }, 2000);\n    // }\n        \n\n    // dropBomb () {\n    //     let bomb = new Bomb(this.ctx, this.position);\n    //     bomb.render();\n    // }\n}\n\nmodule.exports = Player;"]},"metadata":{},"sourceType":"module"}