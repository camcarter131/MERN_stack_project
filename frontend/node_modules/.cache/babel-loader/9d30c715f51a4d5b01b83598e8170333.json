{"ast":null,"code":"import Bombs from '../bombs/bombs';\nimport { DOWN, UP, RIGHT, LEFT, SPACE } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n  constructor(canvas, ctx, img, grid) {\n    super(canvas, ctx, img);\n    this.position.x = 16 + 48;\n    this.position.y = canvas.height - 34 - 48;\n    this.renderSize = 48;\n    this.radius = this.renderSize / 2;\n    this.radius_partial = Math.sqrt(this.radius ** 2 / 2);\n    this.grid = grid;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this); //5 refers to the total number of squares an explosion will cover\n\n    this.bombSize = 4;\n    this.lives = 3;\n    this.bombs = new Bombs(this);\n    this.spaceBool = true;\n    this.isKilled = true;\n    this.statsChange();\n    this.shouldEndGame = true;\n    this.animation = new Animation(ctx, this, {\n      frames: [1, 2],\n      loop: true\n    });\n    window.bombQueue = this.bombs.bombQueue;\n    this.deathMonitoring = this.deathMonitoring.bind(this);\n    this.gameOverAnimation = [[2, 1], [2, 2], [2, 3], [2, 5], [2, 6], [2, 7], [2, 9], [2, 11], [2, 13], [2, 14], [2, 15], [3, 1], [3, 5], [3, 7], [3, 9], [3, 9], [3, 10], [3, 11], [3, 13], [4, 1], [4, 5], [4, 7], [4, 9], [4, 10], [4, 11], [4, 13], [4, 14], [5, 1], [5, 3], [5, 5], [5, 6], [5, 7], [5, 9], [5, 11], [5, 13], [6, 1], [6, 2], [6, 3], [6, 5], [6, 7], [6, 9], [6, 11], [6, 13], [6, 14], [6, 15], [10, 1], [10, 2], [10, 3], [10, 5], [10, 7], [10, 9], [10, 10], [10, 11], [10, 13], [10, 14], [10, 15], [11, 1], [11, 3], [11, 5], [11, 7], [11, 9], [11, 13], [11, 15], [12, 1], [12, 3], [12, 5], [12, 7], [12, 9], [12, 10], [12, 13], [12, 15], [13, 1], [13, 3], [13, 5], [13, 7], [13, 9], [13, 13], [13, 14], [14, 1], [14, 2], [14, 3], [14, 6], [14, 9], [14, 10], [14, 11], [14, 13], [14, 15]];\n  }\n\n  deathMonitoring(row, col) {\n    if (this.grid.gridArray[row][col] === 'E') {\n      if (this.isKilled) {\n        this.isKilled = false;\n        this.lives -= 1;\n        setTimeout(() => this.relocatePlayer(), 1000);\n        console.log(this.lives);\n        this.speed = 0;\n        this.bombs = new Bombs(this);\n        setTimeout(() => this.speed = 200, 1000);\n      }\n    } else {\n      this.isKilled = true;\n    }\n  }\n\n  livesDepleted() {\n    if (this.lives === 0 && this.shouldEndGame) {\n      this.shouldEndGame = false;\n      this.speed = 0;\n      this.size.width = 0;\n      this.size.height = 0;\n      let blackOut = setInterval(() => {\n        let alreadyBlacked = [];\n        let randRow = Math.floor(Math.random() * this.grid.gridArray.length);\n        let randCol = Math.floor(Math.random() * this.grid.gridArray.length);\n        alreadyBlacked.push([randRow, randCol]);\n\n        if (this.grid.gridArray[randRow][randCol] !== \"W\" && this.grid.gridArray[randRow][randCol] !== \"TXT\" && !alreadyBlacked.includes([randRow, randCol])) {\n          this.grid.gridArray[randRow][randCol] = \"W\";\n        }\n      }, 0.1);\n      setTimeout(() => clearInterval(blackOut), 10000);\n      setTimeout(() => {\n        let gameOverText = setInterval(() => {\n          let selection = Math.floor(Math.random() * this.gameOverAnimation.length);\n          let coords = this.gameOverAnimation[selection];\n          let row = coords[0];\n          let col = coords[1];\n          this.grid.gridArray[row][col] = \"TXT\";\n        }, 10);\n        setTimeout(() => clearInterval(gameOverText), 15000); // this.gameOverAnimation.forEach(coords => {\n        //     let row = coords[0];\n        //     let col = coords[1];\n        //     this.grid.gridArray[row][col] = \"I2\";\n        // })\n      }, 2000);\n      this.statsChange();\n    }\n  }\n\n  statsChange() {\n    var lives = document.getElementById('lives');\n\n    while (lives.firstChild) {\n      lives.removeChild(lives.firstChild);\n    }\n\n    var bombs = document.getElementById('bombs');\n\n    while (bombs.firstChild) {\n      bombs.removeChild(bombs.firstChild);\n    }\n\n    for (let i = 0; i < this.lives; i++) {\n      let heartIcon = document.createElement(\"IMG\");\n      heartIcon.setAttribute(\"src\", \"heart.png\");\n      heartIcon.setAttribute(\"width\", \"48\");\n      heartIcon.setAttribute(\"height\", \"48\");\n      document.getElementById('lives').appendChild(heartIcon);\n    }\n\n    for (let j = 0; j < this.bombs.bombQueue.length; j++) {\n      // debugger    \n      let bombIcon = document.createElement(\"IMG\");\n      bombIcon.setAttribute(\"src\", \"bomb.png\");\n      bombIcon.setAttribute(\"width\", \"48\");\n      bombIcon.setAttribute(\"height\", \"48\");\n      document.getElementById('bombs').appendChild(bombIcon);\n    }\n  }\n\n  statsClear() {\n    var lives = document.getElementById('lives');\n\n    while (lives.firstChild) {\n      lives.removeChild(lives.firstChild);\n    }\n  }\n\n  itemMonitoring(row, col) {\n    switch (this.grid.gridArray[row][col]) {\n      case \"I1\":\n        this.bombs.pickUpBomb();\n        this.statsChange();\n        this.grid.gridArray[row][col] = 'X';\n        break;\n\n      case \"I2\":\n        this.speed = 250;\n        this.grid.gridArray[row][col] = 'X';\n        setTimeout(() => {\n          this.speed = 125;\n        }, 5000);\n        break;\n\n      case \"I3\":\n        this.bombSize += 4; // setTimeout(() => { this.bombSize /= 2; }, 5000);\n\n        this.grid.gridArray[row][col] = 'X';\n        break;\n\n      case \"I4\":\n        this.grid.gridArray[row][col] = 'X';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  relocatePlayer() {\n    let respawns = [//bottom left\n    [64, this.canvas.height - 82], //bottom right\n    [this.canvas.width - 80, this.canvas.height - 82], //top left\n    [64, 64], //top right\n    [this.canvas.width - 80, 64]];\n    let randomLocation = respawns[Math.floor(Math.random() * respawns.length)];\n    this.position.x = randomLocation[0];\n    this.position.y = randomLocation[1]; // this.position.x = this.canvas.width - 80;\n    // this.position.y = 64;\n  }\n\n  handleInput(dt) {\n    let currPos = this.grid.canvasToArray([this.position.x, this.position.y]);\n    this.deathMonitoring(currPos[0], currPos[1]);\n    this.itemMonitoring(currPos[0], currPos[1]);\n    this.livesDepleted();\n\n    if (this.inputHandler.isPressed(SPACE)) {\n      if (this.spaceBool) {\n        this.spaceBool = false;\n        this.bombs.deploy();\n      }\n    } else {\n      this.spaceBool = true;\n    }\n\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n      // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n      // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y += this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n      // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n      // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y -= this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]); // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n      // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n      // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x += this.velocity.x * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]); // debugger\n      // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n      // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n      // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x -= this.velocity.x * dt;\n      }\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt); // this.animation.update(dt);\n  }\n\n  render() {\n    // debugger;\n    super.render(); // document.getElementById(\"lives\").innerHTML = `num lives: ${this.lives}`;\n    // document.getElementById(\"bombs\").innerHTML = `num bombs ${this.bombs.bombQueue.length}`;\n    // this.animation.render(\"y\", 1);\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/cameroncarter/Desktop/aA-flex/frontend/src/bummerman/player/player.js"],"names":["Bombs","DOWN","UP","RIGHT","LEFT","SPACE","Input","Sprite","Animation","Player","constructor","canvas","ctx","img","grid","position","x","y","height","renderSize","radius","radius_partial","Math","sqrt","erase","bind","inputHandler","bombSize","lives","bombs","spaceBool","isKilled","statsChange","shouldEndGame","animation","frames","loop","window","bombQueue","deathMonitoring","gameOverAnimation","row","col","gridArray","setTimeout","relocatePlayer","console","log","speed","livesDepleted","size","width","blackOut","setInterval","alreadyBlacked","randRow","floor","random","length","randCol","push","includes","clearInterval","gameOverText","selection","coords","document","getElementById","firstChild","removeChild","i","heartIcon","createElement","setAttribute","appendChild","j","bombIcon","statsClear","itemMonitoring","pickUpBomb","respawns","randomLocation","handleInput","dt","currPos","canvasToArray","isPressed","deploy","velocity","gridCoords","clearRect","update","render"],"mappings":"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","sourcesContent":["import Bombs from '../bombs/bombs'\nimport { DOWN, UP, RIGHT, LEFT, SPACE } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n    constructor (canvas, ctx, img, grid) {\n        super (canvas, ctx, img);\n        this.position.x = 16+48;\n        this.position.y = canvas.height - 34-48;\n        this.renderSize = 48;\n        this.radius = this.renderSize/2; \n        this.radius_partial = Math.sqrt((this.radius**2)/2);\n        this.grid = grid;\n        this.erase = this.erase.bind(this);\n        this.inputHandler = new Input(this);\n        //5 refers to the total number of squares an explosion will cover\n        this.bombSize = 4;\n        this.lives = 3;\n        this.bombs = new Bombs(this);\n        this.spaceBool = true;\n        this.isKilled = true;\n        this.statsChange();\n        this.shouldEndGame = true;\n        this.animation = new Animation(ctx, this, { frames: [1, 2], loop: true });\n        window.bombQueue = this.bombs.bombQueue;\n        this.deathMonitoring = this.deathMonitoring.bind(this);\n        this.gameOverAnimation = [\n            [2, 1],\n            [2, 2],\n            [2, 3],\n            [2, 5],\n            [2, 6],\n            [2, 7],\n            [2, 9],\n            [2, 11],\n            [2, 13],\n            [2, 14],\n            [2, 15],\n            [3, 1],\n            [3, 5],\n            [3, 7],\n            [3, 9],\n            [3, 9],\n            [3, 10],\n            [3, 11],\n            [3, 13],\n            [4, 1],\n            [4, 5],\n            [4, 7],\n            [4, 9],\n            [4, 10],\n            [4, 11],\n            [4, 13],\n            [4, 14],\n            [5, 1],\n            [5, 3],\n            [5, 5],\n            [5, 6],\n            [5, 7],\n            [5, 9],\n            [5, 11],\n            [5, 13],\n            [6, 1],\n            [6, 2],\n            [6, 3],\n            [6, 5],\n            [6, 7],\n            [6, 9],\n            [6, 11],\n            [6, 13],\n            [6, 14],\n            [6, 15],\n            [10, 1],\n            [10, 2],\n            [10, 3],\n            [10, 5],\n            [10, 7],\n            [10, 9],\n            [10, 10],\n            [10, 11],\n            [10, 13],\n            [10, 14],\n            [10, 15],\n            [11, 1],\n            [11, 3],\n            [11, 5],\n            [11, 7],\n            [11, 9],\n            [11, 13],\n            [11, 15],\n            [12, 1],\n            [12, 3],\n            [12, 5],\n            [12, 7],\n            [12, 9],\n            [12, 10],\n            [12, 13],\n            [12, 15],\n            [13, 1],\n            [13, 3],\n            [13, 5],\n            [13, 7],\n            [13, 9],\n            [13, 13],\n            [13, 14],\n            [14, 1],\n            [14, 2],\n            [14, 3],\n            [14, 6],\n            [14, 9],\n            [14, 10],\n            [14, 11],\n            [14, 13],\n            [14, 15]\n        ];\n    \n    }\n\n    \n    deathMonitoring(row, col) {\n        if (this.grid.gridArray[row][col] === 'E') {\n            if (this.isKilled) {\n                this.isKilled = false;\n                this.lives -= 1;\n                setTimeout(() => this.relocatePlayer(), 1000);\n                console.log(this.lives);\n                this.speed = 0;\n                this.bombs = new Bombs(this);\n                setTimeout(() => this.speed = 200, 1000)\n            }\n        } else {\n            this.isKilled = true;\n        }\n    }\n\n    livesDepleted() {\n        if (this.lives === 0 && this.shouldEndGame) {\n            this.shouldEndGame = false;\n\n            this.speed = 0;\n            this.size.width = 0;\n            this.size.height = 0;\n\n            let blackOut = setInterval(() => {\n                let alreadyBlacked = []\n\n                let randRow = Math.floor(Math.random() * this.grid.gridArray.length);\n                let randCol = Math.floor(Math.random() * this.grid.gridArray.length);\n                alreadyBlacked.push([randRow, randCol])\n\n                if (\n                    this.grid.gridArray[randRow][randCol] !== \"W\" \n                    && this.grid.gridArray[randRow][randCol] !== \"TXT\" \n                    && !alreadyBlacked.includes([randRow, randCol])) \n                {\n                    this.grid.gridArray[randRow][randCol] = \"W\";\n                }\n            \n            }, 0.1);\n            setTimeout(() => clearInterval(blackOut), 10000);\n\n            setTimeout(() => {\n                let gameOverText = setInterval(() => {\n                    let selection = Math.floor(Math.random() * this.gameOverAnimation.length);\n                    let coords = this.gameOverAnimation[selection];\n                    let row = coords[0];\n                    let col = coords[1];\n\n                    this.grid.gridArray[row][col] = \"TXT\";\n                }, 10);\n\n                setTimeout(() => clearInterval(gameOverText), 15000);\n                // this.gameOverAnimation.forEach(coords => {\n                //     let row = coords[0];\n                //     let col = coords[1];\n\n                //     this.grid.gridArray[row][col] = \"I2\";\n                // })\n            }, 2000);\n        this.statsChange();\n        }\n    }\n\n    statsChange() {\n        var lives = document.getElementById('lives');\n        while (lives.firstChild) {\n            lives.removeChild(lives.firstChild);\n        }\n\n        var bombs = document.getElementById('bombs');\n        while (bombs.firstChild) {\n            bombs.removeChild(bombs.firstChild);\n        }\n        \n        for (let i = 0; i < this.lives; i++) {\n            let heartIcon = document.createElement(\"IMG\");\n            heartIcon.setAttribute(\"src\", \"heart.png\");\n            heartIcon.setAttribute(\"width\", \"48\");\n            heartIcon.setAttribute(\"height\", \"48\");\n            document.getElementById('lives').appendChild(heartIcon);\n        }\n        for (let j = 0; j < this.bombs.bombQueue.length; j++) {\n            // debugger    \n            let bombIcon = document.createElement(\"IMG\");\n            bombIcon.setAttribute(\"src\", \"bomb.png\");\n            bombIcon.setAttribute(\"width\", \"48\");\n            bombIcon.setAttribute(\"height\", \"48\");\n            document.getElementById('bombs').appendChild(bombIcon);\n        }\n    }\n\n    statsClear() {\n        var lives = document.getElementById('lives');\n        while (lives.firstChild) {\n            lives.removeChild(lives.firstChild);\n        }\n    }\n\n    itemMonitoring(row, col){\n        switch(this.grid.gridArray[row][col]){\n            case \"I1\":\n                this.bombs.pickUpBomb();\n                this.statsChange();\n                this.grid.gridArray[row][col] = 'X';\n                break;\n            case \"I2\":\n                this.speed = 250;\n                this.grid.gridArray[row][col] = 'X';\n                setTimeout(() => {this.speed = 125; }, 5000);\n                break;\n            case \"I3\":\n                this.bombSize += 4;\n                // setTimeout(() => { this.bombSize /= 2; }, 5000);\n                this.grid.gridArray[row][col] = 'X';\n                break;\n            case \"I4\":\n                this.grid.gridArray[row][col] = 'X';\n                break;\n            default:\n                break;\n        }\n    }\n\n    relocatePlayer() {\n        let respawns = [\n            //bottom left\n            [64, this.canvas.height - 82],\n            //bottom right\n            [this.canvas.width - 80, this.canvas.height - 82],\n            //top left\n            [64, 64],\n            //top right\n            [this.canvas.width - 80, 64]\n        ]\n \n        let randomLocation = respawns[Math.floor(Math.random() * respawns.length)];\n        this.position.x = randomLocation[0];\n        this.position.y = randomLocation[1];\n        // this.position.x = this.canvas.width - 80;\n        // this.position.y = 64;\n    }\n\n\n\n\n\n    handleInput(dt) {\n        let currPos = this.grid.canvasToArray([this.position.x, this.position.y]);\n\n\n        this.deathMonitoring(currPos[0], currPos[1]);\n        this.itemMonitoring(currPos[0], currPos[1]);\n        this.livesDepleted(); \n\n        if (this.inputHandler.isPressed(SPACE)) {\n                if (this.spaceBool){\n                    this.spaceBool = false;\n                    this.bombs.deploy();\n                }\n        } else {\n            this.spaceBool = true;\n        }\n        \n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n            // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null;\n            } else {\n                this.position.y += this.velocity.y * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n            // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.y -= this.velocity.y * dt;\n            }\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]);\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n            // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null\n            } else {\n                this.position.x += this.velocity.x * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]);\n            // debugger\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            // this.deathMonitoring(gridCoords[0], gridCoords[1]);\n            // this.itemMonitoring(gridCoords[0], gridCoords[1]);\n\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.x -= this.velocity.x * dt;\n            }\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n        // this.animation.update(dt);\n    }\n\n    render () {\n        // debugger;\n        super.render();\n        \n        // document.getElementById(\"lives\").innerHTML = `num lives: ${this.lives}`;\n        // document.getElementById(\"bombs\").innerHTML = `num bombs ${this.bombs.bombQueue.length}`;\n\n\n        // this.animation.render(\"y\", 1);\n    }\n\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}