{"ast":null,"code":"import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n  constructor(canvas, ctx, img, grid) {\n    super(canvas, ctx, img);\n    this.position.x = canvas.width / 2 + 24;\n    this.position.y = canvas.width / 2 + 24;\n    this.renderSize = 48;\n    this.radius = this.renderSize / 2;\n    this.radius_partial = Math.sqrt(this.radius ** 2 / 2);\n    this.grid = grid;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this);\n    this.animation = new Animation(ctx, this, {\n      frames: [1, 2],\n      loop: true\n    });\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.size.width]);\n      // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n      this.position.y += this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y - this.radius]);\n      // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n      this.position.y -= this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      let gridCoords = this.grid.canvasToArray([this.position.x + this.radius, this.position.y]);\n      let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n        return null;\n      }\n\n      this.position.x += this.velocity.x * dt;\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      let gridCoords = this.grid.canvasToArray([this.position.x - this.radius, this.position.y]);\n      let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n        return null;\n      }\n\n      this.position.x -= this.velocity.x * dt;\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt);\n    this.animation.update(dt);\n  }\n\n  render() {\n    // debugger;\n    super.render();\n    this.animation.render(\"y\", 1);\n  } // render () {\n  //     this.ctx.fillStyle = this.color;\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  // }\n\n\n  renderBomb() {\n    let x = this.position.x - this.width;\n    let y = this.position.y - this.height;\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n    setTimeout(() => {\n      this.ctx.fillStyle = \"#ffffff\";\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }, 2000);\n  }\n\n  dropBomb() {\n    let bomb = new Bomb(this.ctx, this.position);\n    bomb.render();\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player/player.js"],"names":["Bomb","DOWN","UP","RIGHT","LEFT","Input","Sprite","Animation","Player","constructor","canvas","ctx","img","grid","position","x","width","y","renderSize","radius","radius_partial","Math","sqrt","erase","bind","inputHandler","animation","frames","loop","handleInput","dt","isPressed","velocity","gridCoords","canvasToArray","gridCoordsU","gridCoordsD","gridArray","clearRect","height","update","render","renderBomb","fillStyle","beginPath","arc","PI","closePath","fill","setTimeout","dropBomb","bomb"],"mappings":"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","sourcesContent":["import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n    constructor (canvas, ctx, img, grid) {\n        super (canvas, ctx, img);\n        this.position.x = (canvas.width/2) + 24;\n        this.position.y = (canvas.width/2) + 24;\n        this.renderSize = 48;\n        this.radius = this.renderSize/2;\n        this.radius_partial = Math.sqrt((this.radius**2)/2);\n        this.grid = grid;\n        this.erase = this.erase.bind(this);\n        this.inputHandler = new Input(this);\n\n        this.animation = new Animation(ctx, this, { frames: [1, 2], loop: true });\n    }\n\n    handleInput(dt) {\n        \n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.size.width]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            this.position.y += this.velocity.y * dt;\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            // let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y - this.radius]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            this.position.y -= this.velocity.y * dt;\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            let gridCoords = this.grid.canvasToArray([this.position.x + this.radius, this.position.y]);\n            let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n            let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n                return null\n            }\n            this.position.x += this.velocity.x * dt;\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            let gridCoords = this.grid.canvasToArray([this.position.x - this.radius, this.position.y]);\n            let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n                return null\n            }\n            this.position.x -= this.velocity.x * dt;\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n        this.animation.update(dt);\n    }\n\n    render () {\n        // debugger;\n        super.render();\n        this.animation.render(\"y\", 1);\n    }\n\n    // render () {\n    //     this.ctx.fillStyle = this.color;\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    // }\n\n    renderBomb() {\n        let x = this.position.x - this.width; \n        let y = this.position.y -this.height;\n        this.ctx.fillStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n        setTimeout(() => {\n            this.ctx.fillStyle = \"#ffffff\";\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }, 2000);\n    }\n        \n\n    dropBomb () {\n        let bomb = new Bomb(this.ctx, this.position);\n        bomb.render();\n    }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}