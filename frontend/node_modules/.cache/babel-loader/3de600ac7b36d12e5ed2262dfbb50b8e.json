{"ast":null,"code":"class Animation {\n  constructor(ctx, sprite, config) {\n    this.ctx = ctx;\n    this.sprite = sprite;\n    this.frames = config.frames;\n    this.frameWidth = Math.floor(this.sprite.img.width / this.frames.length);\n    this._index = 0;\n    this.frameCountBuffer = config.frameCountBuffer || 20;\n    this.frameCount = 0;\n    this.config = config || {\n      loop: true\n    };\n    window.spritevel = this.sprite.velocity;\n  }\n\n  update(dt) {\n    this.frameCount++;\n    if (this.frameCount < this.frameCountBuffer) return;else {\n      this._index = ++this._index % this.frames.length;\n      this.frameCount = 0;\n    }\n  }\n\n  render(axis, dir) {\n    // let frame;\n    // if (this.sprite.speed > 0) {\n    //     const maxFrameCount = this.frames.length;\n    //     const nextFrameIdx = Math.floor(this._index);\n    //     frame = this.frames[nextFrameIdx % maxFrameCount];\n    //     if (!this.config.loop && nextFrameIdx > maxFrameCount) return;\n    //     else frame = 0;\n    // }\n    if (dir > 0) {\n      this.sprite.velocity[axis] > 0 ? this.ctx.drawImage(this.sprite.img, this.frames[this._index] * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48) : this.ctx.drawImage(this.sprite.img, 0 * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48);\n    } else {\n      this._index = this.sprite.velocity[axis] < 0 ? this.ctx.drawImage(this.sprite.img, this.frames[this._index] * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48) : this.ctx.drawImage(this.sprite.img, 0 * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48);\n    }\n  }\n\n}\n\nexport default Animation;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/animation.js"],"names":["Animation","constructor","ctx","sprite","config","frames","frameWidth","Math","floor","img","width","length","_index","frameCountBuffer","frameCount","loop","window","spritevel","velocity","update","dt","render","axis","dir","drawImage","size","height"],"mappings":"AAAA,MAAMA,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAsB;AAC7B,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,MAAL,GAAcD,MAAM,CAACC,MAArB;AACA,SAAKC,UAAL,GAAkBC,IAAI,CAACC,KAAL,CAAW,KAAKL,MAAL,CAAYM,GAAZ,CAAgBC,KAAhB,GAAwB,KAAKL,MAAL,CAAYM,MAA/C,CAAlB;AACA,SAAKC,MAAL,GAAc,CAAd;AAEA,SAAKC,gBAAL,GAAwBT,MAAM,CAACS,gBAAP,IAA2B,EAAnD;AACA,SAAKC,UAAL,GAAkB,CAAlB;AAEA,SAAKV,MAAL,GAAcA,MAAM,IAAI;AACpBW,MAAAA,IAAI,EAAE;AADc,KAAxB;AAGAC,IAAAA,MAAM,CAACC,SAAP,GAAmB,KAAKd,MAAL,CAAYe,QAA/B;AACH;;AAEDC,EAAAA,MAAM,CAACC,EAAD,EAAK;AACP,SAAKN,UAAL;AACA,QAAI,KAAKA,UAAL,GAAkB,KAAKD,gBAA3B,EAA6C,OAA7C,KACK;AACD,WAAKD,MAAL,GAAc,EAAE,KAAKA,MAAP,GAAgB,KAAKP,MAAL,CAAYM,MAA1C;AACA,WAAKG,UAAL,GAAkB,CAAlB;AACH;AACJ;;AAEDO,EAAAA,MAAM,CAACC,IAAD,EAAOC,GAAP,EAAY;AACd;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,QAAIA,GAAG,GAAG,CAAV,EAAa;AACR,WAAKpB,MAAL,CAAYe,QAAZ,CAAqBI,IAArB,IAA6B,CAA9B,GACI,KAAKpB,GAAL,CAASsB,SAAT,CAAmB,KAAKrB,MAAL,CAAYM,GAA/B,EAAoC,KAAKJ,MAAL,CAAY,KAAKO,MAAjB,IAA2B,KAAKT,MAAL,CAAYsB,IAAZ,CAAiBf,KAAhF,EAAuF,CAAvF,EAA0F,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBf,KAA3G,EAAkH,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBC,MAAnI,EAA2I,CAA3I,EAA8I,CAA9I,EAAiJ,EAAjJ,EAAqJ,EAArJ,CADJ,GAEI,KAAKxB,GAAL,CAASsB,SAAT,CAAmB,KAAKrB,MAAL,CAAYM,GAA/B,EAAoC,IAAI,KAAKN,MAAL,CAAYsB,IAAZ,CAAiBf,KAAzD,EAAgE,CAAhE,EAAmE,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBf,KAApF,EAA2F,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBC,MAA5G,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,EAA1H,EAA8H,EAA9H,CAFJ;AAGH,KAJD,MAIO;AACH,WAAKd,MAAL,GAAe,KAAKT,MAAL,CAAYe,QAAZ,CAAqBI,IAArB,IAA6B,CAA9B,GAAmC,KAAKpB,GAAL,CAASsB,SAAT,CAAmB,KAAKrB,MAAL,CAAYM,GAA/B,EAAoC,KAAKJ,MAAL,CAAY,KAAKO,MAAjB,IAA2B,KAAKT,MAAL,CAAYsB,IAAZ,CAAiBf,KAAhF,EAAuF,CAAvF,EAA0F,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBf,KAA3G,EAAkH,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBC,MAAnI,EAA2I,CAA3I,EAA8I,CAA9I,EAAiJ,EAAjJ,EAAqJ,EAArJ,CAAnC,GACV,KAAKxB,GAAL,CAASsB,SAAT,CAAmB,KAAKrB,MAAL,CAAYM,GAA/B,EAAoC,IAAI,KAAKN,MAAL,CAAYsB,IAAZ,CAAiBf,KAAzD,EAAgE,CAAhE,EAAmE,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBf,KAApF,EAA2F,KAAKP,MAAL,CAAYsB,IAAZ,CAAiBC,MAA5G,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,EAA1H,EAA8H,EAA9H,CADJ;AAEH;AACJ;;AA5CW;;AA+ChB,eAAe1B,SAAf","sourcesContent":["class Animation {\n    constructor(ctx, sprite, config) {\n        this.ctx = ctx;\n        this.sprite = sprite;\n        this.frames = config.frames;\n        this.frameWidth = Math.floor(this.sprite.img.width / this.frames.length);\n        this._index = 0;\n\n        this.frameCountBuffer = config.frameCountBuffer || 20;\n        this.frameCount = 0;\n\n        this.config = config || {\n            loop: true\n        }\n        window.spritevel = this.sprite.velocity;\n    }\n\n    update(dt) {\n        this.frameCount++;\n        if (this.frameCount < this.frameCountBuffer) return;\n        else {\n            this._index = ++this._index % this.frames.length;\n            this.frameCount = 0;\n        }\n    }\n\n    render(axis, dir) {\n        // let frame;\n        // if (this.sprite.speed > 0) {\n        //     const maxFrameCount = this.frames.length;\n        //     const nextFrameIdx = Math.floor(this._index);\n        //     frame = this.frames[nextFrameIdx % maxFrameCount];\n\n        //     if (!this.config.loop && nextFrameIdx > maxFrameCount) return;\n        //     else frame = 0;\n        // }\n        if (dir > 0) {\n            (this.sprite.velocity[axis] > 0) ?\n                this.ctx.drawImage(this.sprite.img, this.frames[this._index] * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48) :\n                this.ctx.drawImage(this.sprite.img, 0 * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48);\n        } else {\n            this._index = (this.sprite.velocity[axis] < 0) ? this.ctx.drawImage(this.sprite.img, this.frames[this._index] * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48) :\n                this.ctx.drawImage(this.sprite.img, 0 * this.sprite.size.width, 0, this.sprite.size.width, this.sprite.size.height, 0, 0, 48, 48);\n        }\n    }\n}\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}