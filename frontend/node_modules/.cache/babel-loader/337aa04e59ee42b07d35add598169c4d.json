{"ast":null,"code":"import Wall from './wall';\nimport Object from './object';\nexport default class Grid {\n  constructor(canvas, ctx) {\n    this.ctx = ctx;\n    this.height = canvas.height;\n    this.width = canvas.width;\n    this.gridArray = [...Array(15)].map(e => [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]);\n    this.createWalls();\n    this.createObjects();\n    this.renderGame(this.ctx);\n  } //populates gridarray with W's\n\n\n  createWalls() {\n    for (let i = 1; i < this.gridArray[0].length; i += 2) {\n      for (let j = 1; j < this.gridArray[0].length; j += 2) {\n        this.gridArray[i][j] = \"W\";\n      }\n    }\n  }\n\n  createObjects() {\n    let numObjects = 25;\n\n    for (let i = 0; i < this.gridArray[0].length; i += 1) {\n      for (let j = 0; j < this.gridArray[0].length; j += 1) {\n        if (i === 14 && j === 14) break;\n        if (this.gridArray[i][j] === \"W\") continue;\n\n        if (Math.random() < .15) {\n          this.gridArray[i][j] = \"O\";\n          numObjects -= 1;\n        }\n      }\n    }\n  } // Goes through master array and renders element in legend\n\n\n  renderGame() {\n    this.gridArray.forEach((row, x) => {\n      row.forEach((el, y) => {\n        let canvasCoords = this.arrayToCanvas([x, y]);\n\n        switch (el) {\n          case \"W\":\n            let wall = new Wall(this.ctx, canvasCoords);\n            wall.render();\n            break;\n\n          case \"O\":\n            let object = new Object(this.ctx, canvasCoords);\n            object.render();\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n  } //hard code initial gridarray\n  //function to make that array reflect in canvas\n  //legend\n  //W = immovable wall\n  //O = perishable obstacle\n  //B = bomb\n  //F = bomb fire\n  //X = background image\n\n\n  arrayToCanvas(arrayCoordinates) {\n    return [48 * arrayCoordinates[1], 48 * arrayCoordinates[0]];\n  }\n\n  canvasToArray(canvasPosition) {\n    let x = Math.floor(canvasPosition[1] / 48) * 48;\n    let y = Math.floor(canvasPosition[0] / 48) * 48;\n    return [x / 48, y / 48];\n  }\n\n  drawGrid() {\n    for (let x = 0; x <= this.width; x += 48) {\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, this.height);\n    }\n\n    for (let y = 0; y <= this.height; y += 48) {\n      this.ctx.moveTo(0, y);\n      this.ctx.lineTo(this.width, y);\n    }\n\n    this.ctx.strokeStyle = \"black\";\n    this.ctx.stroke();\n  } // populateGrid() {\n  //     //COmment in if you want a bigass black border\n  //     // for (let x = 0; x < this.width; x += 48) {\n  //     //     this.ctx.fillStyle = \"#000000\";\n  //     //     this.ctx.fillRect(x, 0, 48, 48);\n  //     //     this.ctx.fillRect(x, this.height-48, 48, 48);\n  //     // }\n  //     // for (let y = 0; y < this.height; y += 48) {\n  //     //     this.ctx.fillStyle = \"#000000\";\n  //     //     this.ctx.fillRect(0, y, 48, 48);\n  //     //     this.ctx.fillRect(this.width-48, y, 48, 48);\n  //     // }\n  // }\n\n\n}","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/grid.js"],"names":["Wall","Object","Grid","constructor","canvas","ctx","height","width","gridArray","Array","map","e","createWalls","createObjects","renderGame","i","length","j","numObjects","Math","random","forEach","row","x","el","y","canvasCoords","arrayToCanvas","wall","render","object","arrayCoordinates","canvasToArray","canvasPosition","floor","drawGrid","moveTo","lineTo","strokeStyle","stroke"],"mappings":"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","sourcesContent":["import Wall from './wall';\nimport Object from './object';\n\nexport default class Grid {\n\n    constructor(canvas, ctx){\n        this.ctx = ctx;\n        this.height = canvas.height;\n        this.width = canvas.width;\n        this.gridArray = [...Array(15)].map(e => [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]);\n        this.createWalls();\n        this.createObjects();\n        this.renderGame(this.ctx);\n    }\n\n    //populates gridarray with W's\n    createWalls(){\n        for(let i=1; i<this.gridArray[0].length; i+=2){\n            for(let j = 1; j < this.gridArray[0].length; j += 2){\n                this.gridArray[i][j] = \"W\";\n            }\n        }\n    }\n\n    createObjects(){\n        let numObjects = 25;\n        for(let i=0; i<this.gridArray[0].length; i+=1){\n            for(let j = 0; j < this.gridArray[0].length; j += 1){\n                if (i === 14 && j === 14) break;\n                if (this.gridArray[i][j] === \"W\") continue;\n                if (Math.random() < .15) {\n                    this.gridArray[i][j] = \"O\";\n                    numObjects -= 1;\n                }\n            }\n        }\n    }\n\n    // Goes through master array and renders element in legend\n\n    renderGame() {\n        this.gridArray.forEach((row, x) => {\n            row.forEach((el, y) => {\n                let canvasCoords = this.arrayToCanvas([x, y]);\n                switch(el) {\n                    case \"W\":\n                        let wall = new Wall(this.ctx, canvasCoords)\n                        wall.render();\n                        break;\n                    case \"O\":\n                        let object = new Object(this.ctx, canvasCoords)\n                        object.render();\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n    }\n\n    //hard code initial gridarray\n    //function to make that array reflect in canvas\n\n    //legend\n    //W = immovable wall\n    //O = perishable obstacle\n    //B = bomb\n    //F = bomb fire\n    //X = background image\n\n    arrayToCanvas(arrayCoordinates) {\n        return [48*arrayCoordinates[1], 48*arrayCoordinates[0]];\n    }\n\n    canvasToArray(canvasPosition) {\n        let x = Math.floor(canvasPosition[1]/48) * 48;\n        let y = Math.floor(canvasPosition[0]/48) * 48;\n        return [x / 48, y / 48];\n    }\n\n\n    drawGrid() {\n        for (let x = 0; x <= this.width; x += 48) {\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, this.height);\n        }\n\n        for (let y = 0; y <= this.height; y += 48) {\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(this.width, y);\n        }\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.stroke();\n    }\n\n    // populateGrid() {\n    //     //COmment in if you want a bigass black border\n    //     // for (let x = 0; x < this.width; x += 48) {\n    //     //     this.ctx.fillStyle = \"#000000\";\n    //     //     this.ctx.fillRect(x, 0, 48, 48);\n    //     //     this.ctx.fillRect(x, this.height-48, 48, 48);\n    //     // }\n\n    //     // for (let y = 0; y < this.height; y += 48) {\n    //     //     this.ctx.fillStyle = \"#000000\";\n    //     //     this.ctx.fillRect(0, y, 48, 48);\n    //     //     this.ctx.fillRect(this.width-48, y, 48, 48);\n    //     // }\n\n    // }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}