{"ast":null,"code":"import Bomb from './bomb';\nimport { DOWN, UP, RIGHT, LEFT } from './keys';\nimport Input from './input';\n\nclass Player {\n  constructor(canvas, ctx) {\n    this.radius = canvas.width / 15 * 0.75 / 2;\n    this.ctx = ctx;\n    this.position = {\n      x: canvas.width / 2,\n      y: canvas.height / 2\n    };\n    this.speed = this.width;\n    this.width = canvas.width / 15.0;\n    this.height = canvas.height / 15.0;\n    this.color = '#2a52be';\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this);\n  }\n\n  handleInput(dt) {\n    // console.log('updating player pos');\n    // debugger;\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      debugger;\n      this.position.y += this.speed * dt;\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.position.y -= this.speed * dt;\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.position.x += this.speed * dt;\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.position.x -= this.speed * dt;\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt);\n  }\n\n  render() {\n    this.ctx.fillStyle = this.color;\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n\n  renderBomb() {\n    let x = this.position.x - this.width;\n    let y = this.position.y - this.height;\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n    setTimeout(() => {\n      this.ctx.fillStyle = \"#ffffff\";\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }, 2000);\n  }\n\n  dropBomb() {\n    let bomb = new Bomb(this.ctx, this.position);\n    bomb.render();\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player.js"],"names":["Bomb","DOWN","UP","RIGHT","LEFT","Input","Player","constructor","canvas","ctx","radius","width","position","x","y","height","speed","color","erase","bind","inputHandler","handleInput","dt","isPressed","clearRect","update","render","fillStyle","beginPath","arc","Math","PI","closePath","fill","renderBomb","setTimeout","dropBomb","bomb"],"mappings":"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","sourcesContent":["import Bomb from './bomb';\nimport { DOWN, UP, RIGHT, LEFT } from './keys';\nimport Input from './input';\n\nclass Player {\n    constructor (canvas, ctx) {\n        this.radius = ((canvas.width / 15) * (0.75)) / 2;\n        this.ctx = ctx;\n\n        this.position = {\n            x: canvas.width/2,\n            y: canvas.height / 2\n        };\n        this.speed = this.width;\n\n        this.width = canvas.width/15.0;\n        this.height = canvas.height/15.0;\n\n        this.color = '#2a52be';\n        this.erase = this.erase.bind(this);\n\n        this.inputHandler = new Input(this);\n    }\n\n    handleInput(dt) {\n        // console.log('updating player pos');\n        // debugger;\n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            debugger;\n            this.position.y += this.speed * dt;\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.position.y -= this.speed * dt;\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.position.x += this.speed * dt;\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.position.x -= this.speed * dt;\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n    }\n\n    render () {\n        this.ctx.fillStyle = this.color;\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n    }\n\n    renderBomb() {\n        let x = this.position.x - this.width; \n        let y = this.position.y -this.height;\n        this.ctx.fillStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n        setTimeout(() => {\n            this.ctx.fillStyle = \"#ffffff\";\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }, 2000);\n    }\n        \n\n    dropBomb () {\n        let bomb = new Bomb(this.ctx, this.position);\n        bomb.render();\n    }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}