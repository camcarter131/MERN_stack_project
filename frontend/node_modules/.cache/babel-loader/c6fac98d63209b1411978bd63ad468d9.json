{"ast":null,"code":"import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player {\n  //extends Sprite {\n  constructor(canvas, ctx, img, grid) {\n    // super (canvas, ctx, img);\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.position = {\n      x: canvas.width / 2 + 24,\n      y: canvas.width / 2 + 24\n    };\n    this.renderSize = 48;\n    this.radius = this.renderSize / 2;\n    this.radius_partial = Math.sqrt(this.radius ** 2 / 2);\n    this.grid = grid;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this); // this.animation = new Animation(ctx, this, { frames: [1, 2], loop: true });\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y += this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.velocity.y = this.speed;\n      this.velocity.x = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]); // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n      //     return null\n      // } else {\n      // }\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.y -= this.velocity.y * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]); // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x += this.velocity.x * dt;\n      }\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.velocity.x = this.speed;\n      this.velocity.y = 0;\n      let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]); // debugger\n      // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n      // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n      // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n      //     return null\n      // }\n\n      if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n        return null;\n      } else {\n        this.position.x -= this.velocity.x * dt;\n      }\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt); // this.animation.update(dt);\n  }\n\n  render() {} // debugger;\n  // super.render();\n  // this.animation.render(\"y\", 1);\n  // render () {\n  //     this.ctx.fillStyle = this.color;\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  // }\n\n\n  renderBomb() {\n    let x = this.position.x - this.width;\n    let y = this.position.y - this.height;\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n    setTimeout(() => {\n      this.ctx.fillStyle = \"#ffffff\";\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }, 2000);\n  }\n\n  dropBomb() {\n    let bomb = new Bomb(this.ctx, this.position);\n    bomb.render();\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player/player.js"],"names":["Bomb","DOWN","UP","RIGHT","LEFT","Input","Sprite","Animation","Player","constructor","canvas","ctx","img","grid","position","x","width","y","renderSize","radius","radius_partial","Math","sqrt","erase","bind","inputHandler","handleInput","dt","isPressed","velocity","speed","gridCoords","canvasToArray","gridArray","clearRect","height","update","render","renderBomb","fillStyle","beginPath","arc","PI","closePath","fill","setTimeout","dropBomb","bomb"],"mappings":"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","sourcesContent":["import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player { //extends Sprite {\n    constructor (canvas, ctx, img, grid) {\n        // super (canvas, ctx, img);\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.position = {\n            x: (canvas.width/2) + 24,\n            y: (canvas.width/2) + 24\n        }\n        this.renderSize = 48;\n        this.radius = this.renderSize/2;\n        this.radius_partial = Math.sqrt((this.radius**2)/2);\n        this.grid = grid;\n        this.erase = this.erase.bind(this);\n        this.inputHandler = new Input(this);\n\n        // this.animation = new Animation(ctx, this, { frames: [1, 2], loop: true });\n    }\n\n    handleInput(dt) {\n        \n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y + this.radius + 5]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null\n            } else {\n                this.position.y += this.velocity.y * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.velocity.y = this.speed;\n            this.velocity.x = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x, this.position.y]);\n            // let gridCoordsL = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsR = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsL[0]][gridCoordsL[1]] === 'W' || this.grid.gridArray[gridCoordsR[0]][gridCoordsR[1]] === 'W') {\n            //     return null\n            // } else {\n            // }\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.y -= this.velocity.y * dt;\n            }\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x + 22, this.position.y + 20]);\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x + this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O') {\n                return null\n            } else {\n                this.position.x += this.velocity.x * dt;\n            }\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.velocity.x = this.speed;\n            this.velocity.y = 0;\n            let gridCoords = this.grid.canvasToArray([this.position.x - 4, this.position.y + 20]);\n            // debugger\n            // let gridCoordsU = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y - this.radius_partial]);\n            // let gridCoordsD = this.grid.canvasToArray([this.position.x - this.radius_partial, this.position.y + this.radius_partial]);\n            // if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' || this.grid.gridArray[gridCoordsU[0]][gridCoordsU[1]] === 'W' || this.grid.gridArray[gridCoordsD[0]][gridCoordsD[1]] === 'W') {\n            //     return null\n            // }\n            if (this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'W' \n            || this.grid.gridArray[gridCoords[0]][gridCoords[1]] === 'O' ) {\n                return null\n            } else {\n                this.position.x -= this.velocity.x * dt;\n            }\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n        // this.animation.update(dt);\n    }\n\n    render () {\n        // debugger;\n        // super.render();\n        // this.animation.render(\"y\", 1);\n    }\n\n    // render () {\n    //     this.ctx.fillStyle = this.color;\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    // }\n\n    renderBomb() {\n        let x = this.position.x - this.width; \n        let y = this.position.y -this.height;\n        this.ctx.fillStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n        setTimeout(() => {\n            this.ctx.fillStyle = \"#ffffff\";\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }, 2000);\n    }\n        \n\n    dropBomb () {\n        let bomb = new Bomb(this.ctx, this.position);\n        bomb.render();\n    }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}