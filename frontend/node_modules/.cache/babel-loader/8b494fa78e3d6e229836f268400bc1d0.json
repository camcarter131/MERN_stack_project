{"ast":null,"code":"const Grid = require(\"./grid\");\n\nconst Player = require(\"./player/player\");\n\nconst ResourceManager = require(\"./resource_manager/resource_manager\");\n\nclass Game {\n  constructor(players, canvas, ctx) {\n    this.players = players;\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.startingPositions = [{\n      x: 64,\n      y: canvas.height - 82\n    }, {\n      x: 64,\n      y: 56\n    }, {\n      x: canvas.width - 82,\n      y: 56\n    }, {\n      x: canvas.width - 82,\n      y: canvas.height - 82\n    }];\n    this.update = this.update.bind(this);\n    this.init = this.init.bind(this);\n    this.render = this.render.bind(this);\n    this.rm = new ResourceManager();\n    this.grid = new Grid(canvas, ctx); // this.player = new Player(canvas, ctx);\n\n    window.gridArray = this.grid.gridArray;\n    this.initialTime = Date.now();\n    this.rm.load(\"assets/images/df_bomber_ss.png\");\n    this.rm.onReady(this.init.bind(this)); // this.init();\n  }\n\n  init() {\n    this.players = Object.values(this.players).map(plyr => new Player(this.startingPositions.pop(), this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid));\n    this.start();\n  }\n\n  update(dt) {\n    this.players.forEach(player => {\n      // debugger\n      player.update(dt);\n    }); // this.sprite.update(dt);\n  }\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // this.grid.drawGrid();\n\n    this.grid.renderGame();\n    this.players.forEach(player => {\n      player.render();\n    });\n  }\n\n  start() {\n    let time = Date.now();\n    let dt = (time - this.initialTime) / 1000.0;\n    this.update(dt);\n    this.render();\n    this.initialTime = time;\n    requestAnimationFrame(this.start.bind(this));\n  }\n\n}\n\nmodule.exports = Game;","map":{"version":3,"sources":["/Users/cameroncarter/Desktop/aA-flex/frontend/src/bummerman/game.js"],"names":["Grid","require","Player","ResourceManager","Game","constructor","players","canvas","ctx","startingPositions","x","y","height","width","update","bind","init","render","rm","grid","window","gridArray","initialTime","Date","now","load","onReady","Object","values","map","plyr","pop","get","start","dt","forEach","player","clearRect","renderGame","time","requestAnimationFrame","module","exports"],"mappings":"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","sourcesContent":["const Grid= require(\"./grid\");\nconst Player =require(\"./player/player\");\nconst ResourceManager = require(\"./resource_manager/resource_manager\");\n\nclass Game {\n    constructor (players, canvas, ctx) {\n        this.players = players;\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.startingPositions = [{x: 64, y: canvas.height - 82},\n        {x:64, y:56}, {x:canvas.width - 82, y:56},\n        {x:canvas.width - 82, y:canvas.height - 82}];\n        this.update = this.update.bind(this);\n        this.init = this.init.bind(this);\n        this.render = this.render.bind(this);\n        this.rm = new ResourceManager();\n\n        this.grid = new Grid(canvas, ctx);\n        // this.player = new Player(canvas, ctx);\n        window.gridArray = this.grid.gridArray;\n\n        this.initialTime = Date.now();\n\n        \n        this.rm.load(\"assets/images/df_bomber_ss.png\");\n        this.rm.onReady(this.init.bind(this));\n        \n        // this.init();\n    }\n\n    init () {\n        this.players = Object.values(this.players).map((plyr) => (\n         \n            new Player(this.startingPositions.pop(), this.canvas, this.ctx, this.rm.get(\"assets/images/df_bomber_ss.png\"), this.grid)\n       \n        ));\n        this.start();\n    }\n    \n    update (dt) {\n        this.players.forEach((player) => {\n            // debugger\n            player.update(dt);\n        })\n        // this.sprite.update(dt);\n    }\n    \n    render () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // this.grid.drawGrid();\n        this.grid.renderGame();\n        this.players.forEach((player) => {\n            player.render();\n        });\n    }\n\n    start () {\n        let time = Date.now();\n        let dt = (time - this.initialTime) / 1000.0;    \n\n        this.update(dt);\n        this.render();\n\n        this.initialTime = time;\n        requestAnimationFrame(this.start.bind(this));\n    }\n\n}\n\nmodule.exports = Game;"]},"metadata":{},"sourceType":"module"}