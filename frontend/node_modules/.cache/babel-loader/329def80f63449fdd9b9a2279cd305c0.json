{"ast":null,"code":"import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n  constructor(canvas, ctx, img) {\n    super(canvas, ctx, img);\n    this.position.x = canvas.width / 2 + 24;\n    this.position.y = canvas.width / 2 + 24;\n    this.erase = this.erase.bind(this);\n    this.inputHandler = new Input(this);\n    this.animation = new Animation(ctx, this, {\n      frames: 3,\n      loop: true\n    });\n  }\n\n  handleInput(dt) {\n    if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n      this.position.y += this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n      this.position.y -= this.velocity.y * dt;\n    }\n\n    if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n      this.position.x += this.velocity.x * dt;\n    }\n\n    if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n      this.position.x -= this.velocity.x * dt;\n    }\n  }\n\n  erase() {\n    this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height); // this.ctx.fillStyle = \"#ffffff\";\n    // this.ctx.beginPath();\n    // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    // this.ctx.closePath();\n    // this.ctx.fill();\n  }\n\n  update(dt) {\n    this.handleInput(dt);\n  }\n\n  render() {} // render () {\n  //     this.ctx.fillStyle = this.color;\n  //     this.ctx.beginPath();\n  //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n  //     this.ctx.closePath();\n  //     this.ctx.fill();\n  // }\n\n\n  renderBomb() {\n    let x = this.position.x - this.width;\n    let y = this.position.y - this.height;\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.fill();\n    setTimeout(() => {\n      this.ctx.fillStyle = \"#ffffff\";\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }, 2000);\n  }\n\n  dropBomb() {\n    let bomb = new Bomb(this.ctx, this.position);\n    bomb.render();\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/player/player.js"],"names":["Bomb","DOWN","UP","RIGHT","LEFT","Input","Sprite","Animation","Player","constructor","canvas","ctx","img","position","x","width","y","erase","bind","inputHandler","animation","frames","loop","handleInput","dt","isPressed","velocity","clearRect","height","update","render","renderBomb","fillStyle","beginPath","arc","radius","Math","PI","closePath","fill","setTimeout","dropBomb","bomb"],"mappings":"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","sourcesContent":["import Bomb from '../bomb';\nimport { DOWN, UP, RIGHT, LEFT } from '../keys';\nimport Input from '../input';\nimport Sprite from './sprite';\nimport Animation from '../animator/animation';\n\nclass Player extends Sprite {\n    constructor (canvas, ctx, img) {\n        super (canvas, ctx, img);\n\n        this.position.x = (canvas.width/2) + 24;\n        this.position.y = (canvas.width/2) + 24;\n\n        this.erase = this.erase.bind(this);\n\n        this.inputHandler = new Input(this);\n\n        this.animation = new Animation(ctx, this, { frames: 3, loop: true });\n    }\n\n    handleInput(dt) {\n        if (this.inputHandler.isPressed(DOWN) || this.inputHandler.isPressed('s')) {\n            this.position.y += this.velocity.y * dt;\n        }\n        if (this.inputHandler.isPressed(UP) || this.inputHandler.isPressed('w')) {\n            this.position.y -= this.velocity.y * dt;\n        }\n\n        if (this.inputHandler.isPressed(RIGHT) || this.inputHandler.isPressed('s')) {\n            this.position.x += this.velocity.x * dt;\n        }\n        if (this.inputHandler.isPressed(LEFT) || this.inputHandler.isPressed('w')) {\n            this.position.x -= this.velocity.x * dt;\n        }\n    }\n\n    erase () {\n        this.ctx.clearRect(this.position.x, this.position.y, this.width, this.height);\n        // this.ctx.fillStyle = \"#ffffff\";\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        // this.ctx.closePath();\n        // this.ctx.fill();\n    }\n\n    update (dt) {\n        this.handleInput(dt);\n    }\n\n    render () {\n        \n    }\n\n    // render () {\n    //     this.ctx.fillStyle = this.color;\n    //     this.ctx.beginPath();\n    //     this.ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     this.ctx.closePath();\n    //     this.ctx.fill();\n    // }\n\n    renderBomb() {\n        let x = this.position.x - this.width; \n        let y = this.position.y -this.height;\n        this.ctx.fillStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.arc(this.position.x - this.width, this.position.y - this.height, this.radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.ctx.fill();\n        setTimeout(() => {\n            this.ctx.fillStyle = \"#ffffff\";\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, this.radius, 0, 2 * Math.PI);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }, 2000);\n    }\n        \n\n    dropBomb () {\n        let bomb = new Bomb(this.ctx, this.position);\n        bomb.render();\n    }\n}\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}