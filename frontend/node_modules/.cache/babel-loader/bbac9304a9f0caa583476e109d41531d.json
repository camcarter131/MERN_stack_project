{"ast":null,"code":"import { debug } from \"util\";\n\nclass Animator {\n  constructor(ctx, spriteSheet) {\n    this.assets = {};\n    this.ctx = ctx;\n    this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n\n    window.assets = this.assets;\n  }\n\n  generateSprites(spriteSheet) {\n    var resolver;\n    var promise = new Promise(function (arg) {\n      resolver = arg;\n    }); // const output = [];\n    // createImageBitmap(spriteSheet.img, 0, 0, 32, 32).then((res) => {\n    //     this.addAsset(res);\n    //     this.render();\n    // });\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 1; j++) {\n        createImageBitmap(spriteSheet.img, // img data\n        i * spriteSheet.frame.width, // sx: \n        j * spriteSheet.frame.height, // sy:\n        spriteSheet.frame.width, // sw:\n        spriteSheet.frame.height // sh:\n        ).then(res => {\n          this.addAsset(res); // this.render();\n        });\n      }\n    }\n  }\n\n  addAsset(asset) {\n    this.assets[asset.data] = asset;\n  }\n\n  deleteAsset(asset) {\n    delete this.assets[asset];\n  }\n\n  render() {\n    Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx * 48, 64)); // debugger;\n    // this.ctx.drawImage(this.assets.undefined, 64, 64);\n  }\n\n}\n\nexport default Animator;","map":{"version":3,"sources":["/home/aseemar/Desktop/JS_Projects/MERN_stack_project/frontend/src/bummerman/animator/animator.js"],"names":["debug","Animator","constructor","ctx","spriteSheet","assets","generateSprites","window","resolver","promise","Promise","arg","i","j","createImageBitmap","img","frame","width","height","then","res","addAsset","asset","data","deleteAsset","render","Object","values","forEach","sprite","idx","drawImage"],"mappings":"AAAA,SAASA,KAAT,QAAsB,MAAtB;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAAEC,GAAF,EAAOC,WAAP,EAAoB;AAC3B,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKG,eAAL,CAAqBF,WAArB,EAH2B,CAGQ;;AACnCG,IAAAA,MAAM,CAACF,MAAP,GAAgB,KAAKA,MAArB;AACH;;AAEDC,EAAAA,eAAe,CAAEF,WAAF,EAAe;AAC1B,QAAII,QAAJ;AACA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,GAAV,EAAe;AAAEH,MAAAA,QAAQ,GAAGG,GAAX;AAAgB,KAA7C,CAAd,CAF0B,CAG1B;AAEA;AACA;AACA;AACA;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBC,QAAAA,iBAAiB,CACbV,WAAW,CAACW,GADC,EACmB;AAChCH,QAAAA,CAAC,GAAGR,WAAW,CAACY,KAAZ,CAAkBC,KAFT,EAEmB;AAChCJ,QAAAA,CAAC,GAAGT,WAAW,CAACY,KAAZ,CAAkBE,MAHT,EAGmB;AAChCd,QAAAA,WAAW,CAACY,KAAZ,CAAkBC,KAJL,EAImB;AAChCb,QAAAA,WAAW,CAACY,KAAZ,CAAkBE,MALL,CAKmB;AALnB,SAAjB,CAMEC,IANF,CAMSC,GAAD,IAAS;AACb,eAAKC,QAAL,CAAcD,GAAd,EADa,CAEb;AACH,SATD;AAUH;AACJ;AAEJ;;AAEDC,EAAAA,QAAQ,CAAEC,KAAF,EAAS;AACb,SAAKjB,MAAL,CAAYiB,KAAK,CAACC,IAAlB,IAA0BD,KAA1B;AACH;;AAEDE,EAAAA,WAAW,CAAEF,KAAF,EAAS;AAChB,WAAO,KAAKjB,MAAL,CAAYiB,KAAZ,CAAP;AACH;;AAEDG,EAAAA,MAAM,GAAI;AACNC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKtB,MAAnB,EAA2BuB,OAA3B,CAAmC,CAACC,MAAD,EAASC,GAAT,KAAiB,KAAK3B,GAAL,CAAS4B,SAAT,CAAmBF,MAAnB,EAA2BC,GAAG,GAAC,EAA/B,EAAmC,EAAnC,CAApD,EADM,CAEN;AACA;AACH;;AA/CU;;AAkDf,eAAe7B,QAAf","sourcesContent":["import { debug } from \"util\";\n\nclass Animator {\n    constructor (ctx, spriteSheet) {\n        this.assets = {};\n        this.ctx = ctx;\n        this.generateSprites(spriteSheet); //.forEach(sprite => this.addAsset(sprite));\n        window.assets = this.assets;\n    }\n\n    generateSprites (spriteSheet) {\n        var resolver;\n        var promise = new Promise(function (arg) { resolver = arg });\n        // const output = [];\n\n        // createImageBitmap(spriteSheet.img, 0, 0, 32, 32).then((res) => {\n        //     this.addAsset(res);\n        //     this.render();\n        // });\n\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 1; j++) {\n                createImageBitmap(\n                    spriteSheet.img,                // img data\n                    i * spriteSheet.frame.width,    // sx: \n                    j * spriteSheet.frame.height,   // sy:\n                    spriteSheet.frame.width,        // sw:\n                    spriteSheet.frame.height        // sh:\n                ).then( (res) => {\n                    this.addAsset(res);\n                    // this.render();\n                });\n            }\n        }\n        \n    }\n    \n    addAsset (asset) {\n        this.assets[asset.data] = asset;\n    }\n\n    deleteAsset (asset) {\n        delete this.assets[asset];\n    }\n    \n    render () {\n        Object.values(this.assets).forEach((sprite, idx) => this.ctx.drawImage(sprite, idx*48, 64));\n        // debugger;\n        // this.ctx.drawImage(this.assets.undefined, 64, 64);\n    }\n}\n\nexport default Animator;"]},"metadata":{},"sourceType":"module"}